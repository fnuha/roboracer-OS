
FreeRTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003cf0  08003cf0  00004cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d54  08003d54  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003d54  08003d54  00004d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d5c  08003d5c  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d5c  08003d5c  00004d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d60  08003d60  00004d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003d64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ee4  2000006c  08003dd0  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f50  08003dd0  00005f50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cba0  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002392  00000000  00000000  00011c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00013fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7e  00000000  00000000  00014d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235a6  00000000  00000000  000157f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b7  00000000  00000000  00038d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7739  00000000  00000000  00048f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012068c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e44  00000000  00000000  001206d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00124514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003cd8 	.word	0x08003cd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08003cd8 	.word	0x08003cd8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 faf9 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f847 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f8b3 	bl	80006b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800054e:	f107 0308 	add.w	r3, r7, #8
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2302      	movs	r3, #2
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <main+0x84>)
 800055a:	22c8      	movs	r2, #200	@ 0xc8
 800055c:	4919      	ldr	r1, [pc, #100]	@ (80005c4 <main+0x88>)
 800055e:	481a      	ldr	r0, [pc, #104]	@ (80005c8 <main+0x8c>)
 8000560:	f001 fedf 	bl	8002322 <xTaskCreate>
 8000564:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d00b      	beq.n	8000584 <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800056c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000570:	f383 8811 	msr	BASEPRI, r3
 8000574:	f3bf 8f6f 	isb	sy
 8000578:	f3bf 8f4f 	dsb	sy
 800057c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2302      	movs	r3, #2
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <main+0x90>)
 800058e:	22c8      	movs	r2, #200	@ 0xc8
 8000590:	490f      	ldr	r1, [pc, #60]	@ (80005d0 <main+0x94>)
 8000592:	4810      	ldr	r0, [pc, #64]	@ (80005d4 <main+0x98>)
 8000594:	f001 fec5 	bl	8002322 <xTaskCreate>
 8000598:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00b      	beq.n	80005b8 <main+0x7c>
        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	60fb      	str	r3, [r7, #12]
    }
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <main+0x78>

  //start freeRTOS scheduler; never returns
  vTaskStartScheduler();
 80005b8:	f001 fffa 	bl	80025b0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x80>
 80005c0:	08003cf0 	.word	0x08003cf0
 80005c4:	08003d08 	.word	0x08003d08
 80005c8:	080007b1 	.word	0x080007b1
 80005cc:	08003d10 	.word	0x08003d10
 80005d0:	08003d28 	.word	0x08003d28
 80005d4:	080007c1 	.word	0x080007c1

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	@ 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 f8ba 	bl	8003760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <SystemClock_Config+0xd4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a29      	ldr	r2, [pc, #164]	@ (80006ac <SystemClock_Config+0xd4>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <SystemClock_Config+0xd4>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <SystemClock_Config+0xd8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000624:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <SystemClock_Config+0xd8>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <SystemClock_Config+0xd8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800064c:	2310      	movs	r3, #16
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000650:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f8a0 	bl	80017ac <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000672:	f000 f8bf 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fd22 	bl	80010dc <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800069e:	f000 f8a9 	bl	80007f4 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	@ 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b35      	ldr	r3, [pc, #212]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a34      	ldr	r2, [pc, #208]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b32      	ldr	r3, [pc, #200]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a2d      	ldr	r2, [pc, #180]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b2b      	ldr	r3, [pc, #172]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a26      	ldr	r2, [pc, #152]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_GPIO_Init+0xf0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2120      	movs	r1, #32
 800073e:	481a      	ldr	r0, [pc, #104]	@ (80007a8 <MX_GPIO_Init+0xf4>)
 8000740:	f000 fcb2 	bl	80010a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	4814      	ldr	r0, [pc, #80]	@ (80007ac <MX_GPIO_Init+0xf8>)
 800075c:	f000 fb10 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000760:	230c      	movs	r3, #12
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000770:	2307      	movs	r3, #7
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <MX_GPIO_Init+0xf4>)
 800077c:	f000 fb00 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000780:	2320      	movs	r3, #32
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_GPIO_Init+0xf4>)
 8000798:	f000 faf2 	bl	8000d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	@ 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020800 	.word	0x40020800

080007b0 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

	while(1) {
		printf("%s\n", (char*)parameters);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f002 fef1 	bl	80035a0 <puts>
 80007be:	e7fb      	b.n	80007b8 <task1_handler+0x8>

080007c0 <task2_handler>:
	}

}

static void task2_handler(void* parameters) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

	while(1) {
		printf("%s\n", (char*)parameters);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f002 fee9 	bl	80035a0 <puts>
 80007ce:	e7fb      	b.n	80007c8 <task2_handler+0x8>

080007d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a04      	ldr	r2, [pc, #16]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007e2:	f000 f9cb 	bl	8000b7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40001000 	.word	0x40001000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	@ (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000814:	6453      	str	r3, [r2, #68]	@ 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	@ (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	@ 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	@ 0x38
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	4b33      	ldr	r3, [pc, #204]	@ (8000934 <HAL_InitTick+0xe4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	4a32      	ldr	r2, [pc, #200]	@ (8000934 <HAL_InitTick+0xe4>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000870:	4b30      	ldr	r3, [pc, #192]	@ (8000934 <HAL_InitTick+0xe4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	f003 0310 	and.w	r3, r3, #16
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800087c:	f107 0210 	add.w	r2, r7, #16
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fd2e 	bl	80012e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000892:	2b00      	cmp	r3, #0
 8000894:	d103      	bne.n	800089e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000896:	f000 fd13 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 800089a:	6378      	str	r0, [r7, #52]	@ 0x34
 800089c:	e004      	b.n	80008a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800089e:	f000 fd0f 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 80008a2:	4603      	mov	r3, r0
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008aa:	4a23      	ldr	r2, [pc, #140]	@ (8000938 <HAL_InitTick+0xe8>)
 80008ac:	fba2 2303 	umull	r2, r3, r2, r3
 80008b0:	0c9b      	lsrs	r3, r3, #18
 80008b2:	3b01      	subs	r3, #1
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008b6:	4b21      	ldr	r3, [pc, #132]	@ (800093c <HAL_InitTick+0xec>)
 80008b8:	4a21      	ldr	r2, [pc, #132]	@ (8000940 <HAL_InitTick+0xf0>)
 80008ba:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <HAL_InitTick+0xec>)
 80008be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008c4:	4a1d      	ldr	r2, [pc, #116]	@ (800093c <HAL_InitTick+0xec>)
 80008c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	@ (800093c <HAL_InitTick+0xec>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <HAL_InitTick+0xec>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	@ (800093c <HAL_InitTick+0xec>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008dc:	4817      	ldr	r0, [pc, #92]	@ (800093c <HAL_InitTick+0xec>)
 80008de:	f001 fa03 	bl	8001ce8 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d11b      	bne.n	8000928 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008f0:	4812      	ldr	r0, [pc, #72]	@ (800093c <HAL_InitTick+0xec>)
 80008f2:	f001 fa53 	bl	8001d9c <HAL_TIM_Base_Start_IT>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000900:	2b00      	cmp	r3, #0
 8000902:	d111      	bne.n	8000928 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000904:	2036      	movs	r0, #54	@ 0x36
 8000906:	f000 fa2d 	bl	8000d64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d808      	bhi.n	8000922 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	2036      	movs	r0, #54	@ 0x36
 8000916:	f000 fa09 	bl	8000d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <HAL_InitTick+0xf4>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	e002      	b.n	8000928 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000928:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800092c:	4618      	mov	r0, r3
 800092e:	3738      	adds	r7, #56	@ 0x38
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	431bde83 	.word	0x431bde83
 800093c:	20000088 	.word	0x20000088
 8000940:	40001000 	.word	0x40001000
 8000944:	20000004 	.word	0x20000004

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <NMI_Handler+0x4>

08000950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <MemManage_Handler+0x4>

08000960 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <UsageFault_Handler+0x4>

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <TIM6_DAC_IRQHandler+0x10>)
 8000986:	f001 fa79 	bl	8001e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000088 	.word	0x20000088

08000994 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <ITM_SendChar+0x48>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <ITM_SendChar+0x48>)
 80009a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009a8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <ITM_SendChar+0x4c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a0c      	ldr	r2, [pc, #48]	@ (80009e0 <ITM_SendChar+0x4c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80009b6:	bf00      	nop
 80009b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f8      	beq.n	80009b8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80009c6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	6013      	str	r3, [r2, #0]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000edfc 	.word	0xe000edfc
 80009e0:	e0000e00 	.word	0xe0000e00

080009e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e00a      	b.n	8000a0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f6:	f3af 8000 	nop.w
 80009fa:	4601      	mov	r1, r0
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	b2ca      	uxtb	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbf0      	blt.n	80009f6 <_read+0x12>
  }

  return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	e009      	b.n	8000a44 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ffab 	bl	8000994 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf1      	blt.n	8000a30 <_write+0x12>
  }
  return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_close>:

int _close(int file)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_isatty>:

int _isatty(int file)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 fe73 	bl	80037fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fd11 	bl	800053c <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b28:	08003d64 	.word	0x08003d64
  ldr r2, =_sbss
 8000b2c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b30:	20012f50 	.word	0x20012f50

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f8d8 	bl	8000d16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff fe72 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe48 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	200000d0 	.word	0x200000d0

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200000d0 	.word	0x200000d0

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	@ (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	@ (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	@ (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	@ 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ff4c 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3e:	f7ff ff61 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	68b9      	ldr	r1, [r7, #8]
 8000d48:	6978      	ldr	r0, [r7, #20]
 8000d4a:	f7ff ffb1 	bl	8000cb0 <NVIC_EncodePriority>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff80 	bl	8000c5c <__NVIC_SetPriority>
}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff54 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e165      	b.n	8001068 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 8154 	bne.w	8001062 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d005      	beq.n	8000dd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d130      	bne.n	8000e34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d017      	beq.n	8000e70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d123      	bne.n	8000ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	69b9      	ldr	r1, [r7, #24]
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0203 	and.w	r2, r3, #3
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80ae 	beq.w	8001062 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001080 <HAL_GPIO_Init+0x300>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001080 <HAL_GPIO_Init+0x300>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b5a      	ldr	r3, [pc, #360]	@ (8001080 <HAL_GPIO_Init+0x300>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f22:	4a58      	ldr	r2, [pc, #352]	@ (8001084 <HAL_GPIO_Init+0x304>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4f      	ldr	r2, [pc, #316]	@ (8001088 <HAL_GPIO_Init+0x308>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d025      	beq.n	8000f9a <HAL_GPIO_Init+0x21a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4e      	ldr	r2, [pc, #312]	@ (800108c <HAL_GPIO_Init+0x30c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d01f      	beq.n	8000f96 <HAL_GPIO_Init+0x216>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4d      	ldr	r2, [pc, #308]	@ (8001090 <HAL_GPIO_Init+0x310>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x212>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4c      	ldr	r2, [pc, #304]	@ (8001094 <HAL_GPIO_Init+0x314>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4b      	ldr	r2, [pc, #300]	@ (8001098 <HAL_GPIO_Init+0x318>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x20a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4a      	ldr	r2, [pc, #296]	@ (800109c <HAL_GPIO_Init+0x31c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x206>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a49      	ldr	r2, [pc, #292]	@ (80010a0 <HAL_GPIO_Init+0x320>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x202>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00c      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e00a      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	@ (8001084 <HAL_GPIO_Init+0x304>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b3a      	ldr	r3, [pc, #232]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fde:	4a31      	ldr	r2, [pc, #196]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001008:	4a26      	ldr	r2, [pc, #152]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100e:	4b25      	ldr	r3, [pc, #148]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001032:	4a1c      	ldr	r2, [pc, #112]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105c:	4a11      	ldr	r2, [pc, #68]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	f67f ae96 	bls.w	8000d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40013800 	.word	0x40013800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40021400 	.word	0x40021400
 80010a0:	40021800 	.word	0x40021800
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
 80010b4:	4613      	mov	r3, r2
 80010b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c4:	e003      	b.n	80010ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0cc      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010f0:	4b68      	ldr	r3, [pc, #416]	@ (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d90c      	bls.n	8001118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fe:	4b65      	ldr	r3, [pc, #404]	@ (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001106:	4b63      	ldr	r3, [pc, #396]	@ (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d001      	beq.n	8001118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e0b8      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001130:	4b59      	ldr	r3, [pc, #356]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a58      	ldr	r2, [pc, #352]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800113a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001148:	4b53      	ldr	r3, [pc, #332]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a52      	ldr	r2, [pc, #328]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001154:	4b50      	ldr	r3, [pc, #320]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	494d      	ldr	r1, [pc, #308]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	4313      	orrs	r3, r2
 8001164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d044      	beq.n	80011fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d107      	bne.n	800118a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b47      	ldr	r3, [pc, #284]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d119      	bne.n	80011ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e07f      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d003      	beq.n	800119a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001196:	2b03      	cmp	r3, #3
 8001198:	d107      	bne.n	80011aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119a:	4b3f      	ldr	r3, [pc, #252]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d109      	bne.n	80011ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e06f      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e067      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ba:	4b37      	ldr	r3, [pc, #220]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f023 0203 	bic.w	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	4934      	ldr	r1, [pc, #208]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011cc:	f7ff fcea 	bl	8000ba4 <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d2:	e00a      	b.n	80011ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d4:	f7ff fce6 	bl	8000ba4 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e04f      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 020c 	and.w	r2, r3, #12
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d1eb      	bne.n	80011d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011fc:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d20c      	bcs.n	8001224 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120a:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d001      	beq.n	8001224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e032      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001230:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4916      	ldr	r1, [pc, #88]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	4313      	orrs	r3, r2
 8001240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d009      	beq.n	8001262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	490e      	ldr	r1, [pc, #56]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	4313      	orrs	r3, r2
 8001260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001262:	f000 f873 	bl	800134c <HAL_RCC_GetSysClockFreq>
 8001266:	4602      	mov	r2, r0
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	490a      	ldr	r1, [pc, #40]	@ (800129c <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	5ccb      	ldrb	r3, [r1, r3]
 8001276:	fa22 f303 	lsr.w	r3, r2, r3
 800127a:	4a09      	ldr	r2, [pc, #36]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fae4 	bl	8000850 <HAL_InitTick>

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00
 8001298:	40023800 	.word	0x40023800
 800129c:	08003d38 	.word	0x08003d38
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <HAL_RCC_GetHCLKFreq+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000

080012c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012c4:	f7ff fff0 	bl	80012a8 <HAL_RCC_GetHCLKFreq>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	0a9b      	lsrs	r3, r3, #10
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	4903      	ldr	r1, [pc, #12]	@ (80012e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	08003d48 	.word	0x08003d48

080012e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	220f      	movs	r2, #15
 80012f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_RCC_GetClockConfig+0x5c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_RCC_GetClockConfig+0x5c>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <HAL_RCC_GetClockConfig+0x5c>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_RCC_GetClockConfig+0x5c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	08db      	lsrs	r3, r3, #3
 8001322:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <HAL_RCC_GetClockConfig+0x60>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 020f 	and.w	r2, r3, #15
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	601a      	str	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40023c00 	.word	0x40023c00

0800134c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800134c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001350:	b0ae      	sub	sp, #184	@ 0xb8
 8001352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001372:	4bcb      	ldr	r3, [pc, #812]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b0c      	cmp	r3, #12
 800137c:	f200 8206 	bhi.w	800178c <HAL_RCC_GetSysClockFreq+0x440>
 8001380:	a201      	add	r2, pc, #4	@ (adr r2, 8001388 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	080013bd 	.word	0x080013bd
 800138c:	0800178d 	.word	0x0800178d
 8001390:	0800178d 	.word	0x0800178d
 8001394:	0800178d 	.word	0x0800178d
 8001398:	080013c5 	.word	0x080013c5
 800139c:	0800178d 	.word	0x0800178d
 80013a0:	0800178d 	.word	0x0800178d
 80013a4:	0800178d 	.word	0x0800178d
 80013a8:	080013cd 	.word	0x080013cd
 80013ac:	0800178d 	.word	0x0800178d
 80013b0:	0800178d 	.word	0x0800178d
 80013b4:	0800178d 	.word	0x0800178d
 80013b8:	080015bd 	.word	0x080015bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013bc:	4bb9      	ldr	r3, [pc, #740]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80013be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013c2:	e1e7      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013c4:	4bb8      	ldr	r3, [pc, #736]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013ca:	e1e3      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013cc:	4bb4      	ldr	r3, [pc, #720]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013d8:	4bb1      	ldr	r3, [pc, #708]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d071      	beq.n	80014c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e4:	4bae      	ldr	r3, [pc, #696]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	099b      	lsrs	r3, r3, #6
 80013ea:	2200      	movs	r2, #0
 80013ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800140a:	4622      	mov	r2, r4
 800140c:	462b      	mov	r3, r5
 800140e:	f04f 0000 	mov.w	r0, #0
 8001412:	f04f 0100 	mov.w	r1, #0
 8001416:	0159      	lsls	r1, r3, #5
 8001418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800141c:	0150      	lsls	r0, r2, #5
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4621      	mov	r1, r4
 8001424:	1a51      	subs	r1, r2, r1
 8001426:	6439      	str	r1, [r7, #64]	@ 0x40
 8001428:	4629      	mov	r1, r5
 800142a:	eb63 0301 	sbc.w	r3, r3, r1
 800142e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800143c:	4649      	mov	r1, r9
 800143e:	018b      	lsls	r3, r1, #6
 8001440:	4641      	mov	r1, r8
 8001442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001446:	4641      	mov	r1, r8
 8001448:	018a      	lsls	r2, r1, #6
 800144a:	4641      	mov	r1, r8
 800144c:	1a51      	subs	r1, r2, r1
 800144e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001450:	4649      	mov	r1, r9
 8001452:	eb63 0301 	sbc.w	r3, r3, r1
 8001456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001464:	4649      	mov	r1, r9
 8001466:	00cb      	lsls	r3, r1, #3
 8001468:	4641      	mov	r1, r8
 800146a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800146e:	4641      	mov	r1, r8
 8001470:	00ca      	lsls	r2, r1, #3
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	4603      	mov	r3, r0
 8001478:	4622      	mov	r2, r4
 800147a:	189b      	adds	r3, r3, r2
 800147c:	633b      	str	r3, [r7, #48]	@ 0x30
 800147e:	462b      	mov	r3, r5
 8001480:	460a      	mov	r2, r1
 8001482:	eb42 0303 	adc.w	r3, r2, r3
 8001486:	637b      	str	r3, [r7, #52]	@ 0x34
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001494:	4629      	mov	r1, r5
 8001496:	024b      	lsls	r3, r1, #9
 8001498:	4621      	mov	r1, r4
 800149a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800149e:	4621      	mov	r1, r4
 80014a0:	024a      	lsls	r2, r1, #9
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014aa:	2200      	movs	r2, #0
 80014ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014b8:	f7fe feaa 	bl	8000210 <__aeabi_uldivmod>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4613      	mov	r3, r2
 80014c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014c6:	e067      	b.n	8001598 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c8:	4b75      	ldr	r3, [pc, #468]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	099b      	lsrs	r3, r3, #6
 80014ce:	2200      	movs	r2, #0
 80014d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014e2:	2300      	movs	r3, #0
 80014e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014ea:	4622      	mov	r2, r4
 80014ec:	462b      	mov	r3, r5
 80014ee:	f04f 0000 	mov.w	r0, #0
 80014f2:	f04f 0100 	mov.w	r1, #0
 80014f6:	0159      	lsls	r1, r3, #5
 80014f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014fc:	0150      	lsls	r0, r2, #5
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4621      	mov	r1, r4
 8001504:	1a51      	subs	r1, r2, r1
 8001506:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001508:	4629      	mov	r1, r5
 800150a:	eb63 0301 	sbc.w	r3, r3, r1
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800151c:	4649      	mov	r1, r9
 800151e:	018b      	lsls	r3, r1, #6
 8001520:	4641      	mov	r1, r8
 8001522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001526:	4641      	mov	r1, r8
 8001528:	018a      	lsls	r2, r1, #6
 800152a:	4641      	mov	r1, r8
 800152c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001530:	4649      	mov	r1, r9
 8001532:	eb63 0b01 	sbc.w	fp, r3, r1
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001542:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001546:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800154a:	4692      	mov	sl, r2
 800154c:	469b      	mov	fp, r3
 800154e:	4623      	mov	r3, r4
 8001550:	eb1a 0303 	adds.w	r3, sl, r3
 8001554:	623b      	str	r3, [r7, #32]
 8001556:	462b      	mov	r3, r5
 8001558:	eb4b 0303 	adc.w	r3, fp, r3
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800156a:	4629      	mov	r1, r5
 800156c:	028b      	lsls	r3, r1, #10
 800156e:	4621      	mov	r1, r4
 8001570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001574:	4621      	mov	r1, r4
 8001576:	028a      	lsls	r2, r1, #10
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001580:	2200      	movs	r2, #0
 8001582:	673b      	str	r3, [r7, #112]	@ 0x70
 8001584:	677a      	str	r2, [r7, #116]	@ 0x74
 8001586:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800158a:	f7fe fe41 	bl	8000210 <__aeabi_uldivmod>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4613      	mov	r3, r2
 8001594:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001598:	4b41      	ldr	r3, [pc, #260]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	0c1b      	lsrs	r3, r3, #16
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	3301      	adds	r3, #1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ba:	e0eb      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015bc:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c8:	4b35      	ldr	r3, [pc, #212]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d06b      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d4:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	2200      	movs	r2, #0
 80015dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80015e8:	2300      	movs	r3, #0
 80015ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80015ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015f0:	4622      	mov	r2, r4
 80015f2:	462b      	mov	r3, r5
 80015f4:	f04f 0000 	mov.w	r0, #0
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	0159      	lsls	r1, r3, #5
 80015fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001602:	0150      	lsls	r0, r2, #5
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4621      	mov	r1, r4
 800160a:	1a51      	subs	r1, r2, r1
 800160c:	61b9      	str	r1, [r7, #24]
 800160e:	4629      	mov	r1, r5
 8001610:	eb63 0301 	sbc.w	r3, r3, r1
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001622:	4659      	mov	r1, fp
 8001624:	018b      	lsls	r3, r1, #6
 8001626:	4651      	mov	r1, sl
 8001628:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800162c:	4651      	mov	r1, sl
 800162e:	018a      	lsls	r2, r1, #6
 8001630:	4651      	mov	r1, sl
 8001632:	ebb2 0801 	subs.w	r8, r2, r1
 8001636:	4659      	mov	r1, fp
 8001638:	eb63 0901 	sbc.w	r9, r3, r1
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001648:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800164c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001650:	4690      	mov	r8, r2
 8001652:	4699      	mov	r9, r3
 8001654:	4623      	mov	r3, r4
 8001656:	eb18 0303 	adds.w	r3, r8, r3
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	462b      	mov	r3, r5
 800165e:	eb49 0303 	adc.w	r3, r9, r3
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001670:	4629      	mov	r1, r5
 8001672:	024b      	lsls	r3, r1, #9
 8001674:	4621      	mov	r1, r4
 8001676:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800167a:	4621      	mov	r1, r4
 800167c:	024a      	lsls	r2, r1, #9
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001686:	2200      	movs	r2, #0
 8001688:	65bb      	str	r3, [r7, #88]	@ 0x58
 800168a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800168c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001690:	f7fe fdbe 	bl	8000210 <__aeabi_uldivmod>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4613      	mov	r3, r2
 800169a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800169e:	e065      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x420>
 80016a0:	40023800 	.word	0x40023800
 80016a4:	00f42400 	.word	0x00f42400
 80016a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ac:	4b3d      	ldr	r3, [pc, #244]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	2200      	movs	r2, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	4611      	mov	r1, r2
 80016b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80016be:	2300      	movs	r3, #0
 80016c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80016c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016c6:	4642      	mov	r2, r8
 80016c8:	464b      	mov	r3, r9
 80016ca:	f04f 0000 	mov.w	r0, #0
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	0159      	lsls	r1, r3, #5
 80016d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d8:	0150      	lsls	r0, r2, #5
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4641      	mov	r1, r8
 80016e0:	1a51      	subs	r1, r2, r1
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	4649      	mov	r1, r9
 80016e6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016f8:	4659      	mov	r1, fp
 80016fa:	018b      	lsls	r3, r1, #6
 80016fc:	4651      	mov	r1, sl
 80016fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001702:	4651      	mov	r1, sl
 8001704:	018a      	lsls	r2, r1, #6
 8001706:	4651      	mov	r1, sl
 8001708:	1a54      	subs	r4, r2, r1
 800170a:	4659      	mov	r1, fp
 800170c:	eb63 0501 	sbc.w	r5, r3, r1
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	00eb      	lsls	r3, r5, #3
 800171a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800171e:	00e2      	lsls	r2, r4, #3
 8001720:	4614      	mov	r4, r2
 8001722:	461d      	mov	r5, r3
 8001724:	4643      	mov	r3, r8
 8001726:	18e3      	adds	r3, r4, r3
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	464b      	mov	r3, r9
 800172c:	eb45 0303 	adc.w	r3, r5, r3
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800173e:	4629      	mov	r1, r5
 8001740:	028b      	lsls	r3, r1, #10
 8001742:	4621      	mov	r1, r4
 8001744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001748:	4621      	mov	r1, r4
 800174a:	028a      	lsls	r2, r1, #10
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001754:	2200      	movs	r2, #0
 8001756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001758:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800175a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800175e:	f7fe fd57 	bl	8000210 <__aeabi_uldivmod>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4613      	mov	r3, r2
 8001768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	0f1b      	lsrs	r3, r3, #28
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800177a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800177e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800178a:	e003      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001792:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001794:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001798:	4618      	mov	r0, r3
 800179a:	37b8      	adds	r7, #184	@ 0xb8
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	00f42400 	.word	0x00f42400

080017ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e28d      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8083 	beq.w	80018d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017cc:	4b94      	ldr	r3, [pc, #592]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d019      	beq.n	800180c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017d8:	4b91      	ldr	r3, [pc, #580]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
        || \
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017f0:	d00c      	beq.n	800180c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d112      	bne.n	8001824 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fe:	4b88      	ldr	r3, [pc, #544]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800180a:	d10b      	bne.n	8001824 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	4b84      	ldr	r3, [pc, #528]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d05b      	beq.n	80018d0 <HAL_RCC_OscConfig+0x124>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d157      	bne.n	80018d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e25a      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182c:	d106      	bne.n	800183c <HAL_RCC_OscConfig+0x90>
 800182e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7b      	ldr	r2, [pc, #492]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xcc>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0xb4>
 8001846:	4b76      	ldr	r3, [pc, #472]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a75      	ldr	r2, [pc, #468]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b73      	ldr	r3, [pc, #460]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a72      	ldr	r2, [pc, #456]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xcc>
 8001860:	4b6f      	ldr	r3, [pc, #444]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6e      	ldr	r2, [pc, #440]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6b      	ldr	r2, [pc, #428]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f990 	bl	8000ba4 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff f98c 	bl	8000ba4 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	@ 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e21f      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b61      	ldr	r3, [pc, #388]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xdc>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff f97c 	bl	8000ba4 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff f978 	bl	8000ba4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	@ 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e20b      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b57      	ldr	r3, [pc, #348]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x104>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06f      	beq.n	80019be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018de:	4b50      	ldr	r3, [pc, #320]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d017      	beq.n	800191a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
        || \
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b47      	ldr	r3, [pc, #284]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190e:	4b44      	ldr	r3, [pc, #272]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	4b41      	ldr	r3, [pc, #260]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x186>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e1d3      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b3b      	ldr	r3, [pc, #236]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4937      	ldr	r1, [pc, #220]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	e03a      	b.n	80019be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b34      	ldr	r3, [pc, #208]	@ (8001a24 <HAL_RCC_OscConfig+0x278>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff f925 	bl	8000ba4 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff f921 	bl	8000ba4 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1b4      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	4b2b      	ldr	r3, [pc, #172]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4925      	ldr	r1, [pc, #148]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001992:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <HAL_RCC_OscConfig+0x278>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f904 	bl	8000ba4 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff f900 	bl	8000ba4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e193      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d036      	beq.n	8001a38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d016      	beq.n	8001a00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_RCC_OscConfig+0x27c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff f8e4 	bl	8000ba4 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff f8e0 	bl	8000ba4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e173      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80019f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x234>
 80019fe:	e01b      	b.n	8001a38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_RCC_OscConfig+0x27c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff f8cd 	bl	8000ba4 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	e00e      	b.n	8001a2c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f8c9 	bl	8000ba4 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d907      	bls.n	8001a2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e15c      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	42470000 	.word	0x42470000
 8001a28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2c:	4b8a      	ldr	r3, [pc, #552]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ea      	bne.n	8001a0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8097 	beq.w	8001b74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b83      	ldr	r3, [pc, #524]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a66:	4b7c      	ldr	r3, [pc, #496]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a76:	4b79      	ldr	r3, [pc, #484]	@ (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d118      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a82:	4b76      	ldr	r3, [pc, #472]	@ (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a75      	ldr	r2, [pc, #468]	@ (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f889 	bl	8000ba4 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a96:	f7ff f885 	bl	8000ba4 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e118      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x31e>
 8001abc:	4b66      	ldr	r3, [pc, #408]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac0:	4a65      	ldr	r2, [pc, #404]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac8:	e01c      	b.n	8001b04 <HAL_RCC_OscConfig+0x358>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x340>
 8001ad2:	4b61      	ldr	r3, [pc, #388]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad6:	4a60      	ldr	r2, [pc, #384]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ade:	4b5e      	ldr	r3, [pc, #376]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0x358>
 8001aec:	4b5a      	ldr	r3, [pc, #360]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af0:	4a59      	ldr	r2, [pc, #356]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af8:	4b57      	ldr	r3, [pc, #348]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afc:	4a56      	ldr	r2, [pc, #344]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001afe:	f023 0304 	bic.w	r3, r3, #4
 8001b02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d015      	beq.n	8001b38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff f84a 	bl	8000ba4 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7ff f846 	bl	8000ba4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e0d7      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0ee      	beq.n	8001b14 <HAL_RCC_OscConfig+0x368>
 8001b36:	e014      	b.n	8001b62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff f834 	bl	8000ba4 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff f830 	bl	8000ba4 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0c1      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	4b40      	ldr	r3, [pc, #256]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ee      	bne.n	8001b40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80ad 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b7e:	4b36      	ldr	r3, [pc, #216]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d060      	beq.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d145      	bne.n	8001c1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b33      	ldr	r3, [pc, #204]	@ (8001c60 <HAL_RCC_OscConfig+0x4b4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff f804 	bl	8000ba4 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff f800 	bl	8000ba4 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e093      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	071b      	lsls	r3, r3, #28
 8001bea:	491b      	ldr	r1, [pc, #108]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_RCC_OscConfig+0x4b4>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7fe ffd5 	bl	8000ba4 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7fe ffd1 	bl	8000ba4 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e064      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x452>
 8001c1c:	e05c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <HAL_RCC_OscConfig+0x4b4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7fe ffbe 	bl	8000ba4 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7fe ffba 	bl	8000ba4 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e04d      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x480>
 8001c4a:	e045      	b.n	8001cd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e040      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <HAL_RCC_OscConfig+0x538>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d030      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d129      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d122      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c94:	4013      	ands	r3, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d119      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001caa:	085b      	lsrs	r3, r3, #1
 8001cac:	3b01      	subs	r3, #1
 8001cae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e041      	b.n	8001d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f839 	bl	8001d86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3304      	adds	r3, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f000 f9c0 	bl	80020ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d001      	beq.n	8001db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e04e      	b.n	8001e52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a23      	ldr	r2, [pc, #140]	@ (8001e60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d022      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dde:	d01d      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d018      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1e      	ldr	r2, [pc, #120]	@ (8001e68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00e      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1b      	ldr	r2, [pc, #108]	@ (8001e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	@ (8001e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a18      	ldr	r2, [pc, #96]	@ (8001e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d111      	bne.n	8001e40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d010      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3e:	e007      	b.n	8001e50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40000800 	.word	0x40000800
 8001e6c:	40000c00 	.word	0x40000c00
 8001e70:	40010400 	.word	0x40010400
 8001e74:	40014000 	.word	0x40014000
 8001e78:	40001800 	.word	0x40001800

08001e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d020      	beq.n	8001ee0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0202 	mvn.w	r2, #2
 8001eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8d2 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8c4 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f8d5 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d020      	beq.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01b      	beq.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0204 	mvn.w	r2, #4
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2202      	movs	r2, #2
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8ac 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f89e 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8af 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d020      	beq.n	8001f78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01b      	beq.n	8001f78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0208 	mvn.w	r2, #8
 8001f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f886 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001f64:	e005      	b.n	8001f72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f878 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f889 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d020      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01b      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0210 	mvn.w	r2, #16
 8001f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2208      	movs	r2, #8
 8001f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f860 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f852 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f863 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0201 	mvn.w	r2, #1
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fbf4 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f906 	bl	8002218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f834 	bl	8002098 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00c      	beq.n	8002054 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0220 	mvn.w	r2, #32
 800204c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8d8 	bl	8002204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a46      	ldr	r2, [pc, #280]	@ (80021d8 <TIM_Base_SetConfig+0x12c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ca:	d00f      	beq.n	80020ec <TIM_Base_SetConfig+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a43      	ldr	r2, [pc, #268]	@ (80021dc <TIM_Base_SetConfig+0x130>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00b      	beq.n	80020ec <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a42      	ldr	r2, [pc, #264]	@ (80021e0 <TIM_Base_SetConfig+0x134>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d007      	beq.n	80020ec <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a41      	ldr	r2, [pc, #260]	@ (80021e4 <TIM_Base_SetConfig+0x138>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a40      	ldr	r2, [pc, #256]	@ (80021e8 <TIM_Base_SetConfig+0x13c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d108      	bne.n	80020fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a35      	ldr	r2, [pc, #212]	@ (80021d8 <TIM_Base_SetConfig+0x12c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d02b      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800210c:	d027      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a32      	ldr	r2, [pc, #200]	@ (80021dc <TIM_Base_SetConfig+0x130>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d023      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a31      	ldr	r2, [pc, #196]	@ (80021e0 <TIM_Base_SetConfig+0x134>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01f      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a30      	ldr	r2, [pc, #192]	@ (80021e4 <TIM_Base_SetConfig+0x138>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01b      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2f      	ldr	r2, [pc, #188]	@ (80021e8 <TIM_Base_SetConfig+0x13c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d017      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2e      	ldr	r2, [pc, #184]	@ (80021ec <TIM_Base_SetConfig+0x140>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a2d      	ldr	r2, [pc, #180]	@ (80021f0 <TIM_Base_SetConfig+0x144>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00f      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2c      	ldr	r2, [pc, #176]	@ (80021f4 <TIM_Base_SetConfig+0x148>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00b      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2b      	ldr	r2, [pc, #172]	@ (80021f8 <TIM_Base_SetConfig+0x14c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2a      	ldr	r2, [pc, #168]	@ (80021fc <TIM_Base_SetConfig+0x150>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d003      	beq.n	800215e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a29      	ldr	r2, [pc, #164]	@ (8002200 <TIM_Base_SetConfig+0x154>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d108      	bne.n	8002170 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a10      	ldr	r2, [pc, #64]	@ (80021d8 <TIM_Base_SetConfig+0x12c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <TIM_Base_SetConfig+0xf8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <TIM_Base_SetConfig+0x13c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d103      	bne.n	80021ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f023 0201 	bic.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	611a      	str	r2, [r3, #16]
  }
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40010400 	.word	0x40010400
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40014400 	.word	0x40014400
 80021f4:	40014800 	.word	0x40014800
 80021f8:	40001800 	.word	0x40001800
 80021fc:	40001c00 	.word	0x40001c00
 8002200:	40002000 	.word	0x40002000

08002204 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 0208 	add.w	r2, r3, #8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f103 0208 	add.w	r2, r3, #8
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f103 0208 	add.w	r2, r3, #8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6892      	ldr	r2, [r2, #8]
 80022e4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6852      	ldr	r2, [r2, #4]
 80022ee:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d103      	bne.n	8002302 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	1e5a      	subs	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002322:	b580      	push	{r7, lr}
 8002324:	b08c      	sub	sp, #48	@ 0x30
 8002326:	af04      	add	r7, sp, #16
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fe18 	bl	8002f6c <pvPortMalloc>
 800233c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00e      	beq.n	8002362 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002344:	2058      	movs	r0, #88	@ 0x58
 8002346:	f000 fe11 	bl	8002f6c <pvPortMalloc>
 800234a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
 8002358:	e005      	b.n	8002366 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f000 fee8 	bl	8003130 <vPortFree>
 8002360:	e001      	b.n	8002366 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	2300      	movs	r3, #0
 8002370:	9303      	str	r3, [sp, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	9302      	str	r3, [sp, #8]
 8002376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f80e 	bl	80023a4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002388:	69f8      	ldr	r0, [r7, #28]
 800238a:	f000 f8a3 	bl	80024d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800238e:	2301      	movs	r3, #1
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e002      	b.n	800239a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
 8002398:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800239a:	69bb      	ldr	r3, [r7, #24]
    }
 800239c:	4618      	mov	r0, r3
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	461a      	mov	r2, r3
 80023bc:	21a5      	movs	r1, #165	@ 0xa5
 80023be:	f001 f9cf 	bl	8003760 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023cc:	3b01      	subs	r3, #1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f023 0307 	bic.w	r3, r3, #7
 80023da:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <prvInitialiseNewTask+0x5a>
        __asm volatile
 80023e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ea:	f383 8811 	msr	BASEPRI, r3
 80023ee:	f3bf 8f6f 	isb	sy
 80023f2:	f3bf 8f4f 	dsb	sy
 80023f6:	617b      	str	r3, [r7, #20]
    }
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	e7fd      	b.n	80023fa <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01f      	beq.n	8002444 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	e012      	b.n	8002430 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	4413      	add	r3, r2
 8002410:	7819      	ldrb	r1, [r3, #0]
 8002412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	4413      	add	r3, r2
 8002418:	3334      	adds	r3, #52	@ 0x34
 800241a:	460a      	mov	r2, r1
 800241c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3301      	adds	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b09      	cmp	r3, #9
 8002434:	d9e9      	bls.n	800240a <prvInitialiseNewTask+0x66>
 8002436:	e000      	b.n	800243a <prvInitialiseNewTask+0x96>
            {
                break;
 8002438:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002442:	e003      	b.n	800244c <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244e:	2b04      	cmp	r3, #4
 8002450:	d901      	bls.n	8002456 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002452:	2304      	movs	r3, #4
 8002454:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002458:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800245a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002460:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	2200      	movs	r2, #0
 8002466:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	3304      	adds	r3, #4
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fefd 	bl	800226c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	3318      	adds	r3, #24
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fef8 	bl	800226c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002480:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002484:	f1c3 0205 	rsb	r2, r3, #5
 8002488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800248c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	3350      	adds	r3, #80	@ 0x50
 8002496:	2204      	movs	r2, #4
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f001 f960 	bl	8003760 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	3354      	adds	r3, #84	@ 0x54
 80024a4:	2201      	movs	r2, #1
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f001 f959 	bl	8003760 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	68f9      	ldr	r1, [r7, #12]
 80024b2:	69b8      	ldr	r0, [r7, #24]
 80024b4:	f000 fb3c 	bl	8002b30 <pxPortInitialiseStack>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80024be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024ca:	bf00      	nop
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80024dc:	f000 fc5e 	bl	8002d9c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80024e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002594 <prvAddNewTaskToReadyList+0xc0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002594 <prvAddNewTaskToReadyList+0xc0>)
 80024e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80024ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <prvAddNewTaskToReadyList+0xc4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80024f2:	4a29      	ldr	r2, [pc, #164]	@ (8002598 <prvAddNewTaskToReadyList+0xc4>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024f8:	4b26      	ldr	r3, [pc, #152]	@ (8002594 <prvAddNewTaskToReadyList+0xc0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d110      	bne.n	8002522 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002500:	f000 fa7c 	bl	80029fc <prvInitialiseTaskLists>
 8002504:	e00d      	b.n	8002522 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002506:	4b25      	ldr	r3, [pc, #148]	@ (800259c <prvAddNewTaskToReadyList+0xc8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800250e:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <prvAddNewTaskToReadyList+0xc4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	429a      	cmp	r2, r3
 800251a:	d802      	bhi.n	8002522 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800251c:	4a1e      	ldr	r2, [pc, #120]	@ (8002598 <prvAddNewTaskToReadyList+0xc4>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002522:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <prvAddNewTaskToReadyList+0xcc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	4a1d      	ldr	r2, [pc, #116]	@ (80025a0 <prvAddNewTaskToReadyList+0xcc>)
 800252a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800252c:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <prvAddNewTaskToReadyList+0xcc>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	2201      	movs	r2, #1
 800253a:	409a      	lsls	r2, r3
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <prvAddNewTaskToReadyList+0xd0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <prvAddNewTaskToReadyList+0xd0>)
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4a15      	ldr	r2, [pc, #84]	@ (80025a8 <prvAddNewTaskToReadyList+0xd4>)
 8002554:	441a      	add	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	4619      	mov	r1, r3
 800255c:	4610      	mov	r0, r2
 800255e:	f7ff fe92 	bl	8002286 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002562:	f000 fc4d 	bl	8002e00 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <prvAddNewTaskToReadyList+0xc8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800256e:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <prvAddNewTaskToReadyList+0xc4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <prvAddNewTaskToReadyList+0xd8>)
 800257e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200001ac 	.word	0x200001ac
 8002598:	200000d4 	.word	0x200000d4
 800259c:	200001b8 	.word	0x200001b8
 80025a0:	200001c8 	.word	0x200001c8
 80025a4:	200001b4 	.word	0x200001b4
 80025a8:	200000d8 	.word	0x200000d8
 80025ac:	e000ed04 	.word	0xe000ed04

080025b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80025b6:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <vTaskStartScheduler+0x7c>)
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	2300      	movs	r3, #0
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2300      	movs	r3, #0
 80025c0:	2282      	movs	r2, #130	@ 0x82
 80025c2:	491b      	ldr	r1, [pc, #108]	@ (8002630 <vTaskStartScheduler+0x80>)
 80025c4:	481b      	ldr	r0, [pc, #108]	@ (8002634 <vTaskStartScheduler+0x84>)
 80025c6:	f7ff feac 	bl	8002322 <xTaskCreate>
 80025ca:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d116      	bne.n	8002600 <vTaskStartScheduler+0x50>
        __asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	60bb      	str	r3, [r7, #8]
    }
 80025e4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025e6:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <vTaskStartScheduler+0x88>)
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <vTaskStartScheduler+0x8c>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025f4:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <vTaskStartScheduler+0x90>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025fa:	f000 fb2b 	bl	8002c54 <xPortStartScheduler>
 80025fe:	e00f      	b.n	8002620 <vTaskStartScheduler+0x70>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002606:	d10b      	bne.n	8002620 <vTaskStartScheduler+0x70>
        __asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	607b      	str	r3, [r7, #4]
    }
 800261a:	bf00      	nop
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002620:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <vTaskStartScheduler+0x94>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	200001d0 	.word	0x200001d0
 8002630:	08003d30 	.word	0x08003d30
 8002634:	080029cd 	.word	0x080029cd
 8002638:	200001cc 	.word	0x200001cc
 800263c:	200001b8 	.word	0x200001b8
 8002640:	200001b0 	.word	0x200001b0
 8002644:	08003d50 	.word	0x08003d50

08002648 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <vTaskSuspendAll+0x18>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	4a03      	ldr	r2, [pc, #12]	@ (8002660 <vTaskSuspendAll+0x18>)
 8002654:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	200001d4 	.word	0x200001d4

08002664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002672:	4b42      	ldr	r3, [pc, #264]	@ (800277c <xTaskResumeAll+0x118>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10b      	bne.n	8002692 <xTaskResumeAll+0x2e>
        __asm volatile
 800267a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	603b      	str	r3, [r7, #0]
    }
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	e7fd      	b.n	800268e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002692:	f000 fb83 	bl	8002d9c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002696:	4b39      	ldr	r3, [pc, #228]	@ (800277c <xTaskResumeAll+0x118>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3b01      	subs	r3, #1
 800269c:	4a37      	ldr	r2, [pc, #220]	@ (800277c <xTaskResumeAll+0x118>)
 800269e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026a0:	4b36      	ldr	r3, [pc, #216]	@ (800277c <xTaskResumeAll+0x118>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d161      	bne.n	800276c <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026a8:	4b35      	ldr	r3, [pc, #212]	@ (8002780 <xTaskResumeAll+0x11c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d05d      	beq.n	800276c <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026b0:	e02e      	b.n	8002710 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026b2:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <xTaskResumeAll+0x120>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3318      	adds	r3, #24
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fe05 	bl	80022ce <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fe00 	bl	80022ce <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	2201      	movs	r2, #1
 80026d4:	409a      	lsls	r2, r3
 80026d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002788 <xTaskResumeAll+0x124>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002788 <xTaskResumeAll+0x124>)
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4a27      	ldr	r2, [pc, #156]	@ (800278c <xTaskResumeAll+0x128>)
 80026ee:	441a      	add	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f7ff fdc5 	bl	8002286 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002700:	4b23      	ldr	r3, [pc, #140]	@ (8002790 <xTaskResumeAll+0x12c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800270a:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <xTaskResumeAll+0x130>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002710:	4b1c      	ldr	r3, [pc, #112]	@ (8002784 <xTaskResumeAll+0x120>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1cc      	bne.n	80026b2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800271e:	f000 f9eb 	bl	8002af8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002722:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <xTaskResumeAll+0x134>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d010      	beq.n	8002750 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800272e:	f000 f837 	bl	80027a0 <xTaskIncrementTick>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <xTaskResumeAll+0x130>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3b01      	subs	r3, #1
 8002742:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f1      	bne.n	800272e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800274a:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <xTaskResumeAll+0x134>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002750:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <xTaskResumeAll+0x130>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002758:	2301      	movs	r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800275c:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <xTaskResumeAll+0x138>)
 800275e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800276c:	f000 fb48 	bl	8002e00 <vPortExitCritical>

    return xAlreadyYielded;
 8002770:	68bb      	ldr	r3, [r7, #8]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200001d4 	.word	0x200001d4
 8002780:	200001ac 	.word	0x200001ac
 8002784:	2000016c 	.word	0x2000016c
 8002788:	200001b4 	.word	0x200001b4
 800278c:	200000d8 	.word	0x200000d8
 8002790:	200000d4 	.word	0x200000d4
 8002794:	200001c0 	.word	0x200001c0
 8002798:	200001bc 	.word	0x200001bc
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027aa:	4b4f      	ldr	r3, [pc, #316]	@ (80028e8 <xTaskIncrementTick+0x148>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 808f 	bne.w	80028d2 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027b4:	4b4d      	ldr	r3, [pc, #308]	@ (80028ec <xTaskIncrementTick+0x14c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3301      	adds	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027bc:	4a4b      	ldr	r2, [pc, #300]	@ (80028ec <xTaskIncrementTick+0x14c>)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d121      	bne.n	800280c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80027c8:	4b49      	ldr	r3, [pc, #292]	@ (80028f0 <xTaskIncrementTick+0x150>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <xTaskIncrementTick+0x4a>
        __asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	603b      	str	r3, [r7, #0]
    }
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	e7fd      	b.n	80027e6 <xTaskIncrementTick+0x46>
 80027ea:	4b41      	ldr	r3, [pc, #260]	@ (80028f0 <xTaskIncrementTick+0x150>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	4b40      	ldr	r3, [pc, #256]	@ (80028f4 <xTaskIncrementTick+0x154>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a3e      	ldr	r2, [pc, #248]	@ (80028f0 <xTaskIncrementTick+0x150>)
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4a3e      	ldr	r2, [pc, #248]	@ (80028f4 <xTaskIncrementTick+0x154>)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b3e      	ldr	r3, [pc, #248]	@ (80028f8 <xTaskIncrementTick+0x158>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	4a3c      	ldr	r2, [pc, #240]	@ (80028f8 <xTaskIncrementTick+0x158>)
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	f000 f976 	bl	8002af8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800280c:	4b3b      	ldr	r3, [pc, #236]	@ (80028fc <xTaskIncrementTick+0x15c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	429a      	cmp	r2, r3
 8002814:	d348      	bcc.n	80028a8 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002816:	4b36      	ldr	r3, [pc, #216]	@ (80028f0 <xTaskIncrementTick+0x150>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002820:	4b36      	ldr	r3, [pc, #216]	@ (80028fc <xTaskIncrementTick+0x15c>)
 8002822:	f04f 32ff 	mov.w	r2, #4294967295
 8002826:	601a      	str	r2, [r3, #0]
                    break;
 8002828:	e03e      	b.n	80028a8 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282a:	4b31      	ldr	r3, [pc, #196]	@ (80028f0 <xTaskIncrementTick+0x150>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d203      	bcs.n	800284a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002842:	4a2e      	ldr	r2, [pc, #184]	@ (80028fc <xTaskIncrementTick+0x15c>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002848:	e02e      	b.n	80028a8 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3304      	adds	r3, #4
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fd3d 	bl	80022ce <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	3318      	adds	r3, #24
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fd34 	bl	80022ce <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286a:	2201      	movs	r2, #1
 800286c:	409a      	lsls	r2, r3
 800286e:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <xTaskIncrementTick+0x160>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	4a22      	ldr	r2, [pc, #136]	@ (8002900 <xTaskIncrementTick+0x160>)
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4a1f      	ldr	r2, [pc, #124]	@ (8002904 <xTaskIncrementTick+0x164>)
 8002886:	441a      	add	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	3304      	adds	r3, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f7ff fcf9 	bl	8002286 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002898:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <xTaskIncrementTick+0x168>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289e:	429a      	cmp	r2, r3
 80028a0:	d3b9      	bcc.n	8002816 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028a6:	e7b6      	b.n	8002816 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028a8:	4b17      	ldr	r3, [pc, #92]	@ (8002908 <xTaskIncrementTick+0x168>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ae:	4915      	ldr	r1, [pc, #84]	@ (8002904 <xTaskIncrementTick+0x164>)
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d901      	bls.n	80028c4 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028c4:	4b11      	ldr	r3, [pc, #68]	@ (800290c <xTaskIncrementTick+0x16c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 80028cc:	2301      	movs	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e004      	b.n	80028dc <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <xTaskIncrementTick+0x170>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3301      	adds	r3, #1
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <xTaskIncrementTick+0x170>)
 80028da:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028dc:	697b      	ldr	r3, [r7, #20]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200001d4 	.word	0x200001d4
 80028ec:	200001b0 	.word	0x200001b0
 80028f0:	20000164 	.word	0x20000164
 80028f4:	20000168 	.word	0x20000168
 80028f8:	200001c4 	.word	0x200001c4
 80028fc:	200001cc 	.word	0x200001cc
 8002900:	200001b4 	.word	0x200001b4
 8002904:	200000d8 	.word	0x200000d8
 8002908:	200000d4 	.word	0x200000d4
 800290c:	200001c0 	.word	0x200001c0
 8002910:	200001bc 	.word	0x200001bc

08002914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800291a:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <vTaskSwitchContext+0xa4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002922:	4b26      	ldr	r3, [pc, #152]	@ (80029bc <vTaskSwitchContext+0xa8>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002928:	e040      	b.n	80029ac <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800292a:	4b24      	ldr	r3, [pc, #144]	@ (80029bc <vTaskSwitchContext+0xa8>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002930:	4b23      	ldr	r3, [pc, #140]	@ (80029c0 <vTaskSwitchContext+0xac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800293e:	7afb      	ldrb	r3, [r7, #11]
 8002940:	f1c3 031f 	rsb	r3, r3, #31
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	491f      	ldr	r1, [pc, #124]	@ (80029c4 <vTaskSwitchContext+0xb0>)
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10b      	bne.n	8002972 <vTaskSwitchContext+0x5e>
        __asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	607b      	str	r3, [r7, #4]
    }
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <vTaskSwitchContext+0x5a>
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4a11      	ldr	r2, [pc, #68]	@ (80029c4 <vTaskSwitchContext+0xb0>)
 800297e:	4413      	add	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	3308      	adds	r3, #8
 8002994:	429a      	cmp	r2, r3
 8002996:	d104      	bne.n	80029a2 <vTaskSwitchContext+0x8e>
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a07      	ldr	r2, [pc, #28]	@ (80029c8 <vTaskSwitchContext+0xb4>)
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	200001d4 	.word	0x200001d4
 80029bc:	200001c0 	.word	0x200001c0
 80029c0:	200001b4 	.word	0x200001b4
 80029c4:	200000d8 	.word	0x200000d8
 80029c8:	200000d4 	.word	0x200000d4

080029cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029d4:	f000 f852 	bl	8002a7c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <prvIdleTask+0x28>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d9f9      	bls.n	80029d4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80029e0:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <prvIdleTask+0x2c>)
 80029e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029f0:	e7f0      	b.n	80029d4 <prvIdleTask+0x8>
 80029f2:	bf00      	nop
 80029f4:	200000d8 	.word	0x200000d8
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	e00c      	b.n	8002a22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4a12      	ldr	r2, [pc, #72]	@ (8002a5c <prvInitialiseTaskLists+0x60>)
 8002a14:	4413      	add	r3, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fc08 	bl	800222c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d9ef      	bls.n	8002a08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a28:	480d      	ldr	r0, [pc, #52]	@ (8002a60 <prvInitialiseTaskLists+0x64>)
 8002a2a:	f7ff fbff 	bl	800222c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a2e:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <prvInitialiseTaskLists+0x68>)
 8002a30:	f7ff fbfc 	bl	800222c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <prvInitialiseTaskLists+0x6c>)
 8002a36:	f7ff fbf9 	bl	800222c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a3a:	480c      	ldr	r0, [pc, #48]	@ (8002a6c <prvInitialiseTaskLists+0x70>)
 8002a3c:	f7ff fbf6 	bl	800222c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a40:	480b      	ldr	r0, [pc, #44]	@ (8002a70 <prvInitialiseTaskLists+0x74>)
 8002a42:	f7ff fbf3 	bl	800222c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <prvInitialiseTaskLists+0x78>)
 8002a48:	4a05      	ldr	r2, [pc, #20]	@ (8002a60 <prvInitialiseTaskLists+0x64>)
 8002a4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a78 <prvInitialiseTaskLists+0x7c>)
 8002a4e:	4a05      	ldr	r2, [pc, #20]	@ (8002a64 <prvInitialiseTaskLists+0x68>)
 8002a50:	601a      	str	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200000d8 	.word	0x200000d8
 8002a60:	2000013c 	.word	0x2000013c
 8002a64:	20000150 	.word	0x20000150
 8002a68:	2000016c 	.word	0x2000016c
 8002a6c:	20000180 	.word	0x20000180
 8002a70:	20000198 	.word	0x20000198
 8002a74:	20000164 	.word	0x20000164
 8002a78:	20000168 	.word	0x20000168

08002a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a82:	e019      	b.n	8002ab8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a84:	f000 f98a 	bl	8002d9c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a88:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <prvCheckTasksWaitingTermination+0x50>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fc1a 	bl	80022ce <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <prvCheckTasksWaitingTermination+0x54>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad0 <prvCheckTasksWaitingTermination+0x54>)
 8002aa2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <prvCheckTasksWaitingTermination+0x58>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad4 <prvCheckTasksWaitingTermination+0x58>)
 8002aac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002aae:	f000 f9a7 	bl	8002e00 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f810 	bl	8002ad8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <prvCheckTasksWaitingTermination+0x58>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e1      	bne.n	8002a84 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000180 	.word	0x20000180
 8002ad0:	200001ac 	.word	0x200001ac
 8002ad4:	20000194 	.word	0x20000194

08002ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fb23 	bl	8003130 <vPortFree>
                vPortFree( pxTCB );
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fb20 	bl	8003130 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002afc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <prvResetNextTaskUnblockTime+0x30>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b06:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <prvResetNextTaskUnblockTime+0x34>)
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b0e:	e005      	b.n	8002b1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <prvResetNextTaskUnblockTime+0x30>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <prvResetNextTaskUnblockTime+0x34>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000164 	.word	0x20000164
 8002b2c:	200001cc 	.word	0x200001cc

08002b30 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3b04      	subs	r3, #4
 8002b4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f023 0201 	bic.w	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3b04      	subs	r3, #4
 8002b5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b60:	4a0c      	ldr	r2, [pc, #48]	@ (8002b94 <pxPortInitialiseStack+0x64>)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3b14      	subs	r3, #20
 8002b6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3b04      	subs	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f06f 0202 	mvn.w	r2, #2
 8002b7e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3b20      	subs	r3, #32
 8002b84:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	08002b99 	.word	0x08002b99

08002b98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ba2:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <prvTaskExitError+0x58>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d00b      	beq.n	8002bc4 <prvTaskExitError+0x2c>
        __asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	60fb      	str	r3, [r7, #12]
    }
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <prvTaskExitError+0x28>
        __asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	60bb      	str	r3, [r7, #8]
    }
 8002bd6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002bd8:	bf00      	nop
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0fc      	beq.n	8002bda <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	2000000c 	.word	0x2000000c
	...

08002c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c00:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <pxCurrentTCBConst2>)
 8002c02:	6819      	ldr	r1, [r3, #0]
 8002c04:	6808      	ldr	r0, [r1, #0]
 8002c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0a:	f380 8809 	msr	PSP, r0
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f380 8811 	msr	BASEPRI, r0
 8002c1a:	4770      	bx	lr
 8002c1c:	f3af 8000 	nop.w

08002c20 <pxCurrentTCBConst2>:
 8002c20:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop

08002c28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c28:	4808      	ldr	r0, [pc, #32]	@ (8002c4c <prvPortStartFirstTask+0x24>)
 8002c2a:	6800      	ldr	r0, [r0, #0]
 8002c2c:	6800      	ldr	r0, [r0, #0]
 8002c2e:	f380 8808 	msr	MSP, r0
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f380 8814 	msr	CONTROL, r0
 8002c3a:	b662      	cpsie	i
 8002c3c:	b661      	cpsie	f
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	df00      	svc	0
 8002c48:	bf00      	nop
 8002c4a:	0000      	.short	0x0000
 8002c4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop

08002c54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c5a:	4b47      	ldr	r3, [pc, #284]	@ (8002d78 <xPortStartScheduler+0x124>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a47      	ldr	r2, [pc, #284]	@ (8002d7c <xPortStartScheduler+0x128>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10b      	bne.n	8002c7c <xPortStartScheduler+0x28>
        __asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	60fb      	str	r3, [r7, #12]
    }
 8002c76:	bf00      	nop
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <xPortStartScheduler+0x124>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3f      	ldr	r2, [pc, #252]	@ (8002d80 <xPortStartScheduler+0x12c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d10b      	bne.n	8002c9e <xPortStartScheduler+0x4a>
        __asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	613b      	str	r3, [r7, #16]
    }
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	e7fd      	b.n	8002c9a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c9e:	4b39      	ldr	r3, [pc, #228]	@ (8002d84 <xPortStartScheduler+0x130>)
 8002ca0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	22ff      	movs	r2, #255	@ 0xff
 8002cae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b31      	ldr	r3, [pc, #196]	@ (8002d88 <xPortStartScheduler+0x134>)
 8002cc4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cc6:	4b31      	ldr	r3, [pc, #196]	@ (8002d8c <xPortStartScheduler+0x138>)
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ccc:	e009      	b.n	8002ce2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002cce:	4b2f      	ldr	r3, [pc, #188]	@ (8002d8c <xPortStartScheduler+0x138>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <xPortStartScheduler+0x138>)
 8002cd6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b80      	cmp	r3, #128	@ 0x80
 8002cec:	d0ef      	beq.n	8002cce <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cee:	4b27      	ldr	r3, [pc, #156]	@ (8002d8c <xPortStartScheduler+0x138>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d00b      	beq.n	8002d12 <xPortStartScheduler+0xbe>
        __asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	60bb      	str	r3, [r7, #8]
    }
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	e7fd      	b.n	8002d0e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d12:	4b1e      	ldr	r3, [pc, #120]	@ (8002d8c <xPortStartScheduler+0x138>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	4a1c      	ldr	r2, [pc, #112]	@ (8002d8c <xPortStartScheduler+0x138>)
 8002d1a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d8c <xPortStartScheduler+0x138>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d24:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <xPortStartScheduler+0x138>)
 8002d26:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d30:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <xPortStartScheduler+0x13c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <xPortStartScheduler+0x13c>)
 8002d36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <xPortStartScheduler+0x13c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a13      	ldr	r2, [pc, #76]	@ (8002d90 <xPortStartScheduler+0x13c>)
 8002d42:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002d46:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d48:	f000 f8e0 	bl	8002f0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <xPortStartScheduler+0x140>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d52:	f000 f8ff 	bl	8002f54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d56:	4b10      	ldr	r3, [pc, #64]	@ (8002d98 <xPortStartScheduler+0x144>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002d98 <xPortStartScheduler+0x144>)
 8002d5c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002d60:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d62:	f7ff ff61 	bl	8002c28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d66:	f7ff fdd5 	bl	8002914 <vTaskSwitchContext>
    prvTaskExitError();
 8002d6a:	f7ff ff15 	bl	8002b98 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	e000ed00 	.word	0xe000ed00
 8002d7c:	410fc271 	.word	0x410fc271
 8002d80:	410fc270 	.word	0x410fc270
 8002d84:	e000e400 	.word	0xe000e400
 8002d88:	200001d8 	.word	0x200001d8
 8002d8c:	200001dc 	.word	0x200001dc
 8002d90:	e000ed20 	.word	0xe000ed20
 8002d94:	2000000c 	.word	0x2000000c
 8002d98:	e000ef34 	.word	0xe000ef34

08002d9c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
        __asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	607b      	str	r3, [r7, #4]
    }
 8002db4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <vPortEnterCritical+0x5c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8002df8 <vPortEnterCritical+0x5c>)
 8002dbe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <vPortEnterCritical+0x5c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d110      	bne.n	8002dea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <vPortEnterCritical+0x60>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <vPortEnterCritical+0x4e>
        __asm volatile
 8002dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	603b      	str	r3, [r7, #0]
    }
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	e7fd      	b.n	8002de6 <vPortEnterCritical+0x4a>
    }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	2000000c 	.word	0x2000000c
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002e06:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <vPortExitCritical+0x50>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <vPortExitCritical+0x26>
        __asm volatile
 8002e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	607b      	str	r3, [r7, #4]
    }
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	e7fd      	b.n	8002e22 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <vPortExitCritical+0x50>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	4a08      	ldr	r2, [pc, #32]	@ (8002e50 <vPortExitCritical+0x50>)
 8002e2e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e30:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <vPortExitCritical+0x50>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <vPortExitCritical+0x44>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e42:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	2000000c 	.word	0x2000000c
	...

08002e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e60:	f3ef 8009 	mrs	r0, PSP
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	4b15      	ldr	r3, [pc, #84]	@ (8002ec0 <pxCurrentTCBConst>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	f01e 0f10 	tst.w	lr, #16
 8002e70:	bf08      	it	eq
 8002e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e7a:	6010      	str	r0, [r2, #0]
 8002e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002e84:	f380 8811 	msr	BASEPRI, r0
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f7ff fd40 	bl	8002914 <vTaskSwitchContext>
 8002e94:	f04f 0000 	mov.w	r0, #0
 8002e98:	f380 8811 	msr	BASEPRI, r0
 8002e9c:	bc09      	pop	{r0, r3}
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	6808      	ldr	r0, [r1, #0]
 8002ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea6:	f01e 0f10 	tst.w	lr, #16
 8002eaa:	bf08      	it	eq
 8002eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002eb0:	f380 8809 	msr	PSP, r0
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	f3af 8000 	nop.w

08002ec0 <pxCurrentTCBConst>:
 8002ec0:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop

08002ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
        __asm volatile
 8002ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	607b      	str	r3, [r7, #4]
    }
 8002ee0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ee2:	f7ff fc5d 	bl	80027a0 <xTaskIncrementTick>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002eec:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <SysTick_Handler+0x40>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	f383 8811 	msr	BASEPRI, r3
    }
 8002efe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <vPortSetupTimerInterrupt+0x34>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <vPortSetupTimerInterrupt+0x38>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <vPortSetupTimerInterrupt+0x3c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <vPortSetupTimerInterrupt+0x40>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	4a09      	ldr	r2, [pc, #36]	@ (8002f50 <vPortSetupTimerInterrupt+0x44>)
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f2e:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <vPortSetupTimerInterrupt+0x34>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010
 8002f44:	e000e018 	.word	0xe000e018
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	10624dd3 	.word	0x10624dd3
 8002f50:	e000e014 	.word	0xe000e014

08002f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002f64 <vPortEnableVFP+0x10>
 8002f58:	6801      	ldr	r1, [r0, #0]
 8002f5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002f5e:	6001      	str	r1, [r0, #0]
 8002f60:	4770      	bx	lr
 8002f62:	0000      	.short	0x0000
 8002f64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop

08002f6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002f78:	f7ff fb66 	bl	8002648 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f7c:	4b66      	ldr	r3, [pc, #408]	@ (8003118 <pvPortMalloc+0x1ac>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f84:	f000 f938 	bl	80031f8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f88:	4b64      	ldr	r3, [pc, #400]	@ (800311c <pvPortMalloc+0x1b0>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 80a9 	bne.w	80030e8 <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d02e      	beq.n	8002ffa <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d228      	bcs.n	8002ffa <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8002fa8:	2208      	movs	r2, #8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d022      	beq.n	8003000 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f023 0307 	bic.w	r3, r3, #7
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d215      	bcs.n	8002ff4 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f023 0307 	bic.w	r3, r3, #7
 8002fce:	3308      	adds	r3, #8
 8002fd0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d011      	beq.n	8003000 <pvPortMalloc+0x94>
        __asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	617b      	str	r3, [r7, #20]
    }
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ff8:	e002      	b.n	8003000 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	e000      	b.n	8003002 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003000:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d06f      	beq.n	80030e8 <pvPortMalloc+0x17c>
 8003008:	4b45      	ldr	r3, [pc, #276]	@ (8003120 <pvPortMalloc+0x1b4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d86a      	bhi.n	80030e8 <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003012:	4b44      	ldr	r3, [pc, #272]	@ (8003124 <pvPortMalloc+0x1b8>)
 8003014:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003016:	4b43      	ldr	r3, [pc, #268]	@ (8003124 <pvPortMalloc+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800301c:	e004      	b.n	8003028 <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d903      	bls.n	800303a <pvPortMalloc+0xce>
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f1      	bne.n	800301e <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800303a:	4b37      	ldr	r3, [pc, #220]	@ (8003118 <pvPortMalloc+0x1ac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003040:	429a      	cmp	r2, r3
 8003042:	d051      	beq.n	80030e8 <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2208      	movs	r2, #8
 800304a:	4413      	add	r3, r2
 800304c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	1ad2      	subs	r2, r2, r3
 800305e:	2308      	movs	r3, #8
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	429a      	cmp	r2, r3
 8003064:	d920      	bls.n	80030a8 <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <pvPortMalloc+0x124>
        __asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	613b      	str	r3, [r7, #16]
    }
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1ad2      	subs	r2, r2, r3
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030a2:	69b8      	ldr	r0, [r7, #24]
 80030a4:	f000 f90a 	bl	80032bc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <pvPortMalloc+0x1b4>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003120 <pvPortMalloc+0x1b4>)
 80030b4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <pvPortMalloc+0x1b4>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003128 <pvPortMalloc+0x1bc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d203      	bcs.n	80030ca <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030c2:	4b17      	ldr	r3, [pc, #92]	@ (8003120 <pvPortMalloc+0x1b4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a18      	ldr	r2, [pc, #96]	@ (8003128 <pvPortMalloc+0x1bc>)
 80030c8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	4b13      	ldr	r3, [pc, #76]	@ (800311c <pvPortMalloc+0x1b0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030de:	4b13      	ldr	r3, [pc, #76]	@ (800312c <pvPortMalloc+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3301      	adds	r3, #1
 80030e4:	4a11      	ldr	r2, [pc, #68]	@ (800312c <pvPortMalloc+0x1c0>)
 80030e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030e8:	f7ff fabc 	bl	8002664 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <pvPortMalloc+0x1a2>
        __asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	60fb      	str	r3, [r7, #12]
    }
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	e7fd      	b.n	800310a <pvPortMalloc+0x19e>
    return pvReturn;
 800310e:	69fb      	ldr	r3, [r7, #28]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3728      	adds	r7, #40	@ 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20012de8 	.word	0x20012de8
 800311c:	20012dfc 	.word	0x20012dfc
 8003120:	20012dec 	.word	0x20012dec
 8003124:	20012de0 	.word	0x20012de0
 8003128:	20012df0 	.word	0x20012df0
 800312c:	20012df4 	.word	0x20012df4

08003130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d04f      	beq.n	80031e2 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003142:	2308      	movs	r3, #8
 8003144:	425b      	negs	r3, r3
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4413      	add	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <vPortFree+0xbc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <vPortFree+0x46>
        __asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	60fb      	str	r3, [r7, #12]
    }
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	e7fd      	b.n	8003172 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <vPortFree+0x66>
        __asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	60bb      	str	r3, [r7, #8]
    }
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	e7fd      	b.n	8003192 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <vPortFree+0xbc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01e      	beq.n	80031e2 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d11a      	bne.n	80031e2 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <vPortFree+0xbc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80031bc:	f7ff fa44 	bl	8002648 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <vPortFree+0xc0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4413      	add	r3, r2
 80031ca:	4a09      	ldr	r2, [pc, #36]	@ (80031f0 <vPortFree+0xc0>)
 80031cc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031ce:	6938      	ldr	r0, [r7, #16]
 80031d0:	f000 f874 	bl	80032bc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80031d4:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <vPortFree+0xc4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	4a06      	ldr	r2, [pc, #24]	@ (80031f4 <vPortFree+0xc4>)
 80031dc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80031de:	f7ff fa41 	bl	8002664 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031e2:	bf00      	nop
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20012dfc 	.word	0x20012dfc
 80031f0:	20012dec 	.word	0x20012dec
 80031f4:	20012df8 	.word	0x20012df8

080031f8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031fe:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003202:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003204:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <prvHeapInit+0xac>)
 8003206:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00c      	beq.n	800322c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3307      	adds	r3, #7
 8003216:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0307 	bic.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	4a1f      	ldr	r2, [pc, #124]	@ (80032a4 <prvHeapInit+0xac>)
 8003228:	4413      	add	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003230:	4a1d      	ldr	r2, [pc, #116]	@ (80032a8 <prvHeapInit+0xb0>)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003236:	4b1c      	ldr	r3, [pc, #112]	@ (80032a8 <prvHeapInit+0xb0>)
 8003238:	2200      	movs	r2, #0
 800323a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4413      	add	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003244:	2208      	movs	r2, #8
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0307 	bic.w	r3, r3, #7
 8003252:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a15      	ldr	r2, [pc, #84]	@ (80032ac <prvHeapInit+0xb4>)
 8003258:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800325a:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <prvHeapInit+0xb4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <prvHeapInit+0xb4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	1ad2      	subs	r2, r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003278:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <prvHeapInit+0xb4>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a0a      	ldr	r2, [pc, #40]	@ (80032b0 <prvHeapInit+0xb8>)
 8003286:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <prvHeapInit+0xbc>)
 800328e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <prvHeapInit+0xc0>)
 8003292:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003296:	601a      	str	r2, [r3, #0]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	200001e0 	.word	0x200001e0
 80032a8:	20012de0 	.word	0x20012de0
 80032ac:	20012de8 	.word	0x20012de8
 80032b0:	20012df0 	.word	0x20012df0
 80032b4:	20012dec 	.word	0x20012dec
 80032b8:	20012dfc 	.word	0x20012dfc

080032bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032c4:	4b28      	ldr	r3, [pc, #160]	@ (8003368 <prvInsertBlockIntoFreeList+0xac>)
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e002      	b.n	80032d0 <prvInsertBlockIntoFreeList+0x14>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d8f7      	bhi.n	80032ca <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4413      	add	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d108      	bne.n	80032fe <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	441a      	add	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	441a      	add	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d118      	bne.n	8003344 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b15      	ldr	r3, [pc, #84]	@ (800336c <prvInsertBlockIntoFreeList+0xb0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d00d      	beq.n	800333a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e008      	b.n	800334c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800333a:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <prvInsertBlockIntoFreeList+0xb0>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e003      	b.n	800334c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	d002      	beq.n	800335a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20012de0 	.word	0x20012de0
 800336c:	20012de8 	.word	0x20012de8

08003370 <std>:
 8003370:	2300      	movs	r3, #0
 8003372:	b510      	push	{r4, lr}
 8003374:	4604      	mov	r4, r0
 8003376:	e9c0 3300 	strd	r3, r3, [r0]
 800337a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800337e:	6083      	str	r3, [r0, #8]
 8003380:	8181      	strh	r1, [r0, #12]
 8003382:	6643      	str	r3, [r0, #100]	@ 0x64
 8003384:	81c2      	strh	r2, [r0, #14]
 8003386:	6183      	str	r3, [r0, #24]
 8003388:	4619      	mov	r1, r3
 800338a:	2208      	movs	r2, #8
 800338c:	305c      	adds	r0, #92	@ 0x5c
 800338e:	f000 f9e7 	bl	8003760 <memset>
 8003392:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <std+0x58>)
 8003394:	6263      	str	r3, [r4, #36]	@ 0x24
 8003396:	4b0d      	ldr	r3, [pc, #52]	@ (80033cc <std+0x5c>)
 8003398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800339a:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <std+0x60>)
 800339c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800339e:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <std+0x64>)
 80033a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80033a2:	4b0d      	ldr	r3, [pc, #52]	@ (80033d8 <std+0x68>)
 80033a4:	6224      	str	r4, [r4, #32]
 80033a6:	429c      	cmp	r4, r3
 80033a8:	d006      	beq.n	80033b8 <std+0x48>
 80033aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80033ae:	4294      	cmp	r4, r2
 80033b0:	d002      	beq.n	80033b8 <std+0x48>
 80033b2:	33d0      	adds	r3, #208	@ 0xd0
 80033b4:	429c      	cmp	r4, r3
 80033b6:	d105      	bne.n	80033c4 <std+0x54>
 80033b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80033bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c0:	f000 ba40 	b.w	8003844 <__retarget_lock_init_recursive>
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	bf00      	nop
 80033c8:	080035b1 	.word	0x080035b1
 80033cc:	080035d3 	.word	0x080035d3
 80033d0:	0800360b 	.word	0x0800360b
 80033d4:	0800362f 	.word	0x0800362f
 80033d8:	20012e00 	.word	0x20012e00

080033dc <stdio_exit_handler>:
 80033dc:	4a02      	ldr	r2, [pc, #8]	@ (80033e8 <stdio_exit_handler+0xc>)
 80033de:	4903      	ldr	r1, [pc, #12]	@ (80033ec <stdio_exit_handler+0x10>)
 80033e0:	4803      	ldr	r0, [pc, #12]	@ (80033f0 <stdio_exit_handler+0x14>)
 80033e2:	f000 b869 	b.w	80034b8 <_fwalk_sglue>
 80033e6:	bf00      	nop
 80033e8:	20000010 	.word	0x20000010
 80033ec:	08003b45 	.word	0x08003b45
 80033f0:	20000020 	.word	0x20000020

080033f4 <cleanup_stdio>:
 80033f4:	6841      	ldr	r1, [r0, #4]
 80033f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <cleanup_stdio+0x34>)
 80033f8:	4299      	cmp	r1, r3
 80033fa:	b510      	push	{r4, lr}
 80033fc:	4604      	mov	r4, r0
 80033fe:	d001      	beq.n	8003404 <cleanup_stdio+0x10>
 8003400:	f000 fba0 	bl	8003b44 <_fflush_r>
 8003404:	68a1      	ldr	r1, [r4, #8]
 8003406:	4b09      	ldr	r3, [pc, #36]	@ (800342c <cleanup_stdio+0x38>)
 8003408:	4299      	cmp	r1, r3
 800340a:	d002      	beq.n	8003412 <cleanup_stdio+0x1e>
 800340c:	4620      	mov	r0, r4
 800340e:	f000 fb99 	bl	8003b44 <_fflush_r>
 8003412:	68e1      	ldr	r1, [r4, #12]
 8003414:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <cleanup_stdio+0x3c>)
 8003416:	4299      	cmp	r1, r3
 8003418:	d004      	beq.n	8003424 <cleanup_stdio+0x30>
 800341a:	4620      	mov	r0, r4
 800341c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003420:	f000 bb90 	b.w	8003b44 <_fflush_r>
 8003424:	bd10      	pop	{r4, pc}
 8003426:	bf00      	nop
 8003428:	20012e00 	.word	0x20012e00
 800342c:	20012e68 	.word	0x20012e68
 8003430:	20012ed0 	.word	0x20012ed0

08003434 <global_stdio_init.part.0>:
 8003434:	b510      	push	{r4, lr}
 8003436:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <global_stdio_init.part.0+0x30>)
 8003438:	4c0b      	ldr	r4, [pc, #44]	@ (8003468 <global_stdio_init.part.0+0x34>)
 800343a:	4a0c      	ldr	r2, [pc, #48]	@ (800346c <global_stdio_init.part.0+0x38>)
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	4620      	mov	r0, r4
 8003440:	2200      	movs	r2, #0
 8003442:	2104      	movs	r1, #4
 8003444:	f7ff ff94 	bl	8003370 <std>
 8003448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800344c:	2201      	movs	r2, #1
 800344e:	2109      	movs	r1, #9
 8003450:	f7ff ff8e 	bl	8003370 <std>
 8003454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003458:	2202      	movs	r2, #2
 800345a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800345e:	2112      	movs	r1, #18
 8003460:	f7ff bf86 	b.w	8003370 <std>
 8003464:	20012f38 	.word	0x20012f38
 8003468:	20012e00 	.word	0x20012e00
 800346c:	080033dd 	.word	0x080033dd

08003470 <__sfp_lock_acquire>:
 8003470:	4801      	ldr	r0, [pc, #4]	@ (8003478 <__sfp_lock_acquire+0x8>)
 8003472:	f000 b9e8 	b.w	8003846 <__retarget_lock_acquire_recursive>
 8003476:	bf00      	nop
 8003478:	20012f41 	.word	0x20012f41

0800347c <__sfp_lock_release>:
 800347c:	4801      	ldr	r0, [pc, #4]	@ (8003484 <__sfp_lock_release+0x8>)
 800347e:	f000 b9e3 	b.w	8003848 <__retarget_lock_release_recursive>
 8003482:	bf00      	nop
 8003484:	20012f41 	.word	0x20012f41

08003488 <__sinit>:
 8003488:	b510      	push	{r4, lr}
 800348a:	4604      	mov	r4, r0
 800348c:	f7ff fff0 	bl	8003470 <__sfp_lock_acquire>
 8003490:	6a23      	ldr	r3, [r4, #32]
 8003492:	b11b      	cbz	r3, 800349c <__sinit+0x14>
 8003494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003498:	f7ff bff0 	b.w	800347c <__sfp_lock_release>
 800349c:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <__sinit+0x28>)
 800349e:	6223      	str	r3, [r4, #32]
 80034a0:	4b04      	ldr	r3, [pc, #16]	@ (80034b4 <__sinit+0x2c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f5      	bne.n	8003494 <__sinit+0xc>
 80034a8:	f7ff ffc4 	bl	8003434 <global_stdio_init.part.0>
 80034ac:	e7f2      	b.n	8003494 <__sinit+0xc>
 80034ae:	bf00      	nop
 80034b0:	080033f5 	.word	0x080033f5
 80034b4:	20012f38 	.word	0x20012f38

080034b8 <_fwalk_sglue>:
 80034b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034bc:	4607      	mov	r7, r0
 80034be:	4688      	mov	r8, r1
 80034c0:	4614      	mov	r4, r2
 80034c2:	2600      	movs	r6, #0
 80034c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034c8:	f1b9 0901 	subs.w	r9, r9, #1
 80034cc:	d505      	bpl.n	80034da <_fwalk_sglue+0x22>
 80034ce:	6824      	ldr	r4, [r4, #0]
 80034d0:	2c00      	cmp	r4, #0
 80034d2:	d1f7      	bne.n	80034c4 <_fwalk_sglue+0xc>
 80034d4:	4630      	mov	r0, r6
 80034d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034da:	89ab      	ldrh	r3, [r5, #12]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d907      	bls.n	80034f0 <_fwalk_sglue+0x38>
 80034e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034e4:	3301      	adds	r3, #1
 80034e6:	d003      	beq.n	80034f0 <_fwalk_sglue+0x38>
 80034e8:	4629      	mov	r1, r5
 80034ea:	4638      	mov	r0, r7
 80034ec:	47c0      	blx	r8
 80034ee:	4306      	orrs	r6, r0
 80034f0:	3568      	adds	r5, #104	@ 0x68
 80034f2:	e7e9      	b.n	80034c8 <_fwalk_sglue+0x10>

080034f4 <_puts_r>:
 80034f4:	6a03      	ldr	r3, [r0, #32]
 80034f6:	b570      	push	{r4, r5, r6, lr}
 80034f8:	6884      	ldr	r4, [r0, #8]
 80034fa:	4605      	mov	r5, r0
 80034fc:	460e      	mov	r6, r1
 80034fe:	b90b      	cbnz	r3, 8003504 <_puts_r+0x10>
 8003500:	f7ff ffc2 	bl	8003488 <__sinit>
 8003504:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003506:	07db      	lsls	r3, r3, #31
 8003508:	d405      	bmi.n	8003516 <_puts_r+0x22>
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	0598      	lsls	r0, r3, #22
 800350e:	d402      	bmi.n	8003516 <_puts_r+0x22>
 8003510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003512:	f000 f998 	bl	8003846 <__retarget_lock_acquire_recursive>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	0719      	lsls	r1, r3, #28
 800351a:	d502      	bpl.n	8003522 <_puts_r+0x2e>
 800351c:	6923      	ldr	r3, [r4, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d135      	bne.n	800358e <_puts_r+0x9a>
 8003522:	4621      	mov	r1, r4
 8003524:	4628      	mov	r0, r5
 8003526:	f000 f8c5 	bl	80036b4 <__swsetup_r>
 800352a:	b380      	cbz	r0, 800358e <_puts_r+0x9a>
 800352c:	f04f 35ff 	mov.w	r5, #4294967295
 8003530:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003532:	07da      	lsls	r2, r3, #31
 8003534:	d405      	bmi.n	8003542 <_puts_r+0x4e>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	059b      	lsls	r3, r3, #22
 800353a:	d402      	bmi.n	8003542 <_puts_r+0x4e>
 800353c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800353e:	f000 f983 	bl	8003848 <__retarget_lock_release_recursive>
 8003542:	4628      	mov	r0, r5
 8003544:	bd70      	pop	{r4, r5, r6, pc}
 8003546:	2b00      	cmp	r3, #0
 8003548:	da04      	bge.n	8003554 <_puts_r+0x60>
 800354a:	69a2      	ldr	r2, [r4, #24]
 800354c:	429a      	cmp	r2, r3
 800354e:	dc17      	bgt.n	8003580 <_puts_r+0x8c>
 8003550:	290a      	cmp	r1, #10
 8003552:	d015      	beq.n	8003580 <_puts_r+0x8c>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	6022      	str	r2, [r4, #0]
 800355a:	7019      	strb	r1, [r3, #0]
 800355c:	68a3      	ldr	r3, [r4, #8]
 800355e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003562:	3b01      	subs	r3, #1
 8003564:	60a3      	str	r3, [r4, #8]
 8003566:	2900      	cmp	r1, #0
 8003568:	d1ed      	bne.n	8003546 <_puts_r+0x52>
 800356a:	2b00      	cmp	r3, #0
 800356c:	da11      	bge.n	8003592 <_puts_r+0x9e>
 800356e:	4622      	mov	r2, r4
 8003570:	210a      	movs	r1, #10
 8003572:	4628      	mov	r0, r5
 8003574:	f000 f85f 	bl	8003636 <__swbuf_r>
 8003578:	3001      	adds	r0, #1
 800357a:	d0d7      	beq.n	800352c <_puts_r+0x38>
 800357c:	250a      	movs	r5, #10
 800357e:	e7d7      	b.n	8003530 <_puts_r+0x3c>
 8003580:	4622      	mov	r2, r4
 8003582:	4628      	mov	r0, r5
 8003584:	f000 f857 	bl	8003636 <__swbuf_r>
 8003588:	3001      	adds	r0, #1
 800358a:	d1e7      	bne.n	800355c <_puts_r+0x68>
 800358c:	e7ce      	b.n	800352c <_puts_r+0x38>
 800358e:	3e01      	subs	r6, #1
 8003590:	e7e4      	b.n	800355c <_puts_r+0x68>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	6022      	str	r2, [r4, #0]
 8003598:	220a      	movs	r2, #10
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e7ee      	b.n	800357c <_puts_r+0x88>
	...

080035a0 <puts>:
 80035a0:	4b02      	ldr	r3, [pc, #8]	@ (80035ac <puts+0xc>)
 80035a2:	4601      	mov	r1, r0
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	f7ff bfa5 	b.w	80034f4 <_puts_r>
 80035aa:	bf00      	nop
 80035ac:	2000001c 	.word	0x2000001c

080035b0 <__sread>:
 80035b0:	b510      	push	{r4, lr}
 80035b2:	460c      	mov	r4, r1
 80035b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b8:	f000 f8fc 	bl	80037b4 <_read_r>
 80035bc:	2800      	cmp	r0, #0
 80035be:	bfab      	itete	ge
 80035c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80035c2:	89a3      	ldrhlt	r3, [r4, #12]
 80035c4:	181b      	addge	r3, r3, r0
 80035c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80035ca:	bfac      	ite	ge
 80035cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80035ce:	81a3      	strhlt	r3, [r4, #12]
 80035d0:	bd10      	pop	{r4, pc}

080035d2 <__swrite>:
 80035d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d6:	461f      	mov	r7, r3
 80035d8:	898b      	ldrh	r3, [r1, #12]
 80035da:	05db      	lsls	r3, r3, #23
 80035dc:	4605      	mov	r5, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	4616      	mov	r6, r2
 80035e2:	d505      	bpl.n	80035f0 <__swrite+0x1e>
 80035e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e8:	2302      	movs	r3, #2
 80035ea:	2200      	movs	r2, #0
 80035ec:	f000 f8d0 	bl	8003790 <_lseek_r>
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035fa:	81a3      	strh	r3, [r4, #12]
 80035fc:	4632      	mov	r2, r6
 80035fe:	463b      	mov	r3, r7
 8003600:	4628      	mov	r0, r5
 8003602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003606:	f000 b8e7 	b.w	80037d8 <_write_r>

0800360a <__sseek>:
 800360a:	b510      	push	{r4, lr}
 800360c:	460c      	mov	r4, r1
 800360e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003612:	f000 f8bd 	bl	8003790 <_lseek_r>
 8003616:	1c43      	adds	r3, r0, #1
 8003618:	89a3      	ldrh	r3, [r4, #12]
 800361a:	bf15      	itete	ne
 800361c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800361e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003626:	81a3      	strheq	r3, [r4, #12]
 8003628:	bf18      	it	ne
 800362a:	81a3      	strhne	r3, [r4, #12]
 800362c:	bd10      	pop	{r4, pc}

0800362e <__sclose>:
 800362e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003632:	f000 b89d 	b.w	8003770 <_close_r>

08003636 <__swbuf_r>:
 8003636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003638:	460e      	mov	r6, r1
 800363a:	4614      	mov	r4, r2
 800363c:	4605      	mov	r5, r0
 800363e:	b118      	cbz	r0, 8003648 <__swbuf_r+0x12>
 8003640:	6a03      	ldr	r3, [r0, #32]
 8003642:	b90b      	cbnz	r3, 8003648 <__swbuf_r+0x12>
 8003644:	f7ff ff20 	bl	8003488 <__sinit>
 8003648:	69a3      	ldr	r3, [r4, #24]
 800364a:	60a3      	str	r3, [r4, #8]
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	071a      	lsls	r2, r3, #28
 8003650:	d501      	bpl.n	8003656 <__swbuf_r+0x20>
 8003652:	6923      	ldr	r3, [r4, #16]
 8003654:	b943      	cbnz	r3, 8003668 <__swbuf_r+0x32>
 8003656:	4621      	mov	r1, r4
 8003658:	4628      	mov	r0, r5
 800365a:	f000 f82b 	bl	80036b4 <__swsetup_r>
 800365e:	b118      	cbz	r0, 8003668 <__swbuf_r+0x32>
 8003660:	f04f 37ff 	mov.w	r7, #4294967295
 8003664:	4638      	mov	r0, r7
 8003666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	6922      	ldr	r2, [r4, #16]
 800366c:	1a98      	subs	r0, r3, r2
 800366e:	6963      	ldr	r3, [r4, #20]
 8003670:	b2f6      	uxtb	r6, r6
 8003672:	4283      	cmp	r3, r0
 8003674:	4637      	mov	r7, r6
 8003676:	dc05      	bgt.n	8003684 <__swbuf_r+0x4e>
 8003678:	4621      	mov	r1, r4
 800367a:	4628      	mov	r0, r5
 800367c:	f000 fa62 	bl	8003b44 <_fflush_r>
 8003680:	2800      	cmp	r0, #0
 8003682:	d1ed      	bne.n	8003660 <__swbuf_r+0x2a>
 8003684:	68a3      	ldr	r3, [r4, #8]
 8003686:	3b01      	subs	r3, #1
 8003688:	60a3      	str	r3, [r4, #8]
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	6022      	str	r2, [r4, #0]
 8003690:	701e      	strb	r6, [r3, #0]
 8003692:	6962      	ldr	r2, [r4, #20]
 8003694:	1c43      	adds	r3, r0, #1
 8003696:	429a      	cmp	r2, r3
 8003698:	d004      	beq.n	80036a4 <__swbuf_r+0x6e>
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	07db      	lsls	r3, r3, #31
 800369e:	d5e1      	bpl.n	8003664 <__swbuf_r+0x2e>
 80036a0:	2e0a      	cmp	r6, #10
 80036a2:	d1df      	bne.n	8003664 <__swbuf_r+0x2e>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4628      	mov	r0, r5
 80036a8:	f000 fa4c 	bl	8003b44 <_fflush_r>
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d0d9      	beq.n	8003664 <__swbuf_r+0x2e>
 80036b0:	e7d6      	b.n	8003660 <__swbuf_r+0x2a>
	...

080036b4 <__swsetup_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4b29      	ldr	r3, [pc, #164]	@ (800375c <__swsetup_r+0xa8>)
 80036b8:	4605      	mov	r5, r0
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	460c      	mov	r4, r1
 80036be:	b118      	cbz	r0, 80036c8 <__swsetup_r+0x14>
 80036c0:	6a03      	ldr	r3, [r0, #32]
 80036c2:	b90b      	cbnz	r3, 80036c8 <__swsetup_r+0x14>
 80036c4:	f7ff fee0 	bl	8003488 <__sinit>
 80036c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036cc:	0719      	lsls	r1, r3, #28
 80036ce:	d422      	bmi.n	8003716 <__swsetup_r+0x62>
 80036d0:	06da      	lsls	r2, r3, #27
 80036d2:	d407      	bmi.n	80036e4 <__swsetup_r+0x30>
 80036d4:	2209      	movs	r2, #9
 80036d6:	602a      	str	r2, [r5, #0]
 80036d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036dc:	81a3      	strh	r3, [r4, #12]
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
 80036e2:	e033      	b.n	800374c <__swsetup_r+0x98>
 80036e4:	0758      	lsls	r0, r3, #29
 80036e6:	d512      	bpl.n	800370e <__swsetup_r+0x5a>
 80036e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036ea:	b141      	cbz	r1, 80036fe <__swsetup_r+0x4a>
 80036ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036f0:	4299      	cmp	r1, r3
 80036f2:	d002      	beq.n	80036fa <__swsetup_r+0x46>
 80036f4:	4628      	mov	r0, r5
 80036f6:	f000 f8a9 	bl	800384c <_free_r>
 80036fa:	2300      	movs	r3, #0
 80036fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	2300      	movs	r3, #0
 8003708:	6063      	str	r3, [r4, #4]
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f043 0308 	orr.w	r3, r3, #8
 8003714:	81a3      	strh	r3, [r4, #12]
 8003716:	6923      	ldr	r3, [r4, #16]
 8003718:	b94b      	cbnz	r3, 800372e <__swsetup_r+0x7a>
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003724:	d003      	beq.n	800372e <__swsetup_r+0x7a>
 8003726:	4621      	mov	r1, r4
 8003728:	4628      	mov	r0, r5
 800372a:	f000 fa59 	bl	8003be0 <__smakebuf_r>
 800372e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003732:	f013 0201 	ands.w	r2, r3, #1
 8003736:	d00a      	beq.n	800374e <__swsetup_r+0x9a>
 8003738:	2200      	movs	r2, #0
 800373a:	60a2      	str	r2, [r4, #8]
 800373c:	6962      	ldr	r2, [r4, #20]
 800373e:	4252      	negs	r2, r2
 8003740:	61a2      	str	r2, [r4, #24]
 8003742:	6922      	ldr	r2, [r4, #16]
 8003744:	b942      	cbnz	r2, 8003758 <__swsetup_r+0xa4>
 8003746:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800374a:	d1c5      	bne.n	80036d8 <__swsetup_r+0x24>
 800374c:	bd38      	pop	{r3, r4, r5, pc}
 800374e:	0799      	lsls	r1, r3, #30
 8003750:	bf58      	it	pl
 8003752:	6962      	ldrpl	r2, [r4, #20]
 8003754:	60a2      	str	r2, [r4, #8]
 8003756:	e7f4      	b.n	8003742 <__swsetup_r+0x8e>
 8003758:	2000      	movs	r0, #0
 800375a:	e7f7      	b.n	800374c <__swsetup_r+0x98>
 800375c:	2000001c 	.word	0x2000001c

08003760 <memset>:
 8003760:	4402      	add	r2, r0
 8003762:	4603      	mov	r3, r0
 8003764:	4293      	cmp	r3, r2
 8003766:	d100      	bne.n	800376a <memset+0xa>
 8003768:	4770      	bx	lr
 800376a:	f803 1b01 	strb.w	r1, [r3], #1
 800376e:	e7f9      	b.n	8003764 <memset+0x4>

08003770 <_close_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4d06      	ldr	r5, [pc, #24]	@ (800378c <_close_r+0x1c>)
 8003774:	2300      	movs	r3, #0
 8003776:	4604      	mov	r4, r0
 8003778:	4608      	mov	r0, r1
 800377a:	602b      	str	r3, [r5, #0]
 800377c:	f7fd f96b 	bl	8000a56 <_close>
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	d102      	bne.n	800378a <_close_r+0x1a>
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	b103      	cbz	r3, 800378a <_close_r+0x1a>
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	bd38      	pop	{r3, r4, r5, pc}
 800378c:	20012f3c 	.word	0x20012f3c

08003790 <_lseek_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	4d07      	ldr	r5, [pc, #28]	@ (80037b0 <_lseek_r+0x20>)
 8003794:	4604      	mov	r4, r0
 8003796:	4608      	mov	r0, r1
 8003798:	4611      	mov	r1, r2
 800379a:	2200      	movs	r2, #0
 800379c:	602a      	str	r2, [r5, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	f7fd f980 	bl	8000aa4 <_lseek>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d102      	bne.n	80037ae <_lseek_r+0x1e>
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	b103      	cbz	r3, 80037ae <_lseek_r+0x1e>
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	20012f3c 	.word	0x20012f3c

080037b4 <_read_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4d07      	ldr	r5, [pc, #28]	@ (80037d4 <_read_r+0x20>)
 80037b8:	4604      	mov	r4, r0
 80037ba:	4608      	mov	r0, r1
 80037bc:	4611      	mov	r1, r2
 80037be:	2200      	movs	r2, #0
 80037c0:	602a      	str	r2, [r5, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f7fd f90e 	bl	80009e4 <_read>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d102      	bne.n	80037d2 <_read_r+0x1e>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	b103      	cbz	r3, 80037d2 <_read_r+0x1e>
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	bd38      	pop	{r3, r4, r5, pc}
 80037d4:	20012f3c 	.word	0x20012f3c

080037d8 <_write_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4d07      	ldr	r5, [pc, #28]	@ (80037f8 <_write_r+0x20>)
 80037dc:	4604      	mov	r4, r0
 80037de:	4608      	mov	r0, r1
 80037e0:	4611      	mov	r1, r2
 80037e2:	2200      	movs	r2, #0
 80037e4:	602a      	str	r2, [r5, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f7fd f919 	bl	8000a1e <_write>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <_write_r+0x1e>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	b103      	cbz	r3, 80037f6 <_write_r+0x1e>
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	20012f3c 	.word	0x20012f3c

080037fc <__libc_init_array>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003834 <__libc_init_array+0x38>)
 8003800:	4c0d      	ldr	r4, [pc, #52]	@ (8003838 <__libc_init_array+0x3c>)
 8003802:	1b64      	subs	r4, r4, r5
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	2600      	movs	r6, #0
 8003808:	42a6      	cmp	r6, r4
 800380a:	d109      	bne.n	8003820 <__libc_init_array+0x24>
 800380c:	4d0b      	ldr	r5, [pc, #44]	@ (800383c <__libc_init_array+0x40>)
 800380e:	4c0c      	ldr	r4, [pc, #48]	@ (8003840 <__libc_init_array+0x44>)
 8003810:	f000 fa62 	bl	8003cd8 <_init>
 8003814:	1b64      	subs	r4, r4, r5
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	2600      	movs	r6, #0
 800381a:	42a6      	cmp	r6, r4
 800381c:	d105      	bne.n	800382a <__libc_init_array+0x2e>
 800381e:	bd70      	pop	{r4, r5, r6, pc}
 8003820:	f855 3b04 	ldr.w	r3, [r5], #4
 8003824:	4798      	blx	r3
 8003826:	3601      	adds	r6, #1
 8003828:	e7ee      	b.n	8003808 <__libc_init_array+0xc>
 800382a:	f855 3b04 	ldr.w	r3, [r5], #4
 800382e:	4798      	blx	r3
 8003830:	3601      	adds	r6, #1
 8003832:	e7f2      	b.n	800381a <__libc_init_array+0x1e>
 8003834:	08003d5c 	.word	0x08003d5c
 8003838:	08003d5c 	.word	0x08003d5c
 800383c:	08003d5c 	.word	0x08003d5c
 8003840:	08003d60 	.word	0x08003d60

08003844 <__retarget_lock_init_recursive>:
 8003844:	4770      	bx	lr

08003846 <__retarget_lock_acquire_recursive>:
 8003846:	4770      	bx	lr

08003848 <__retarget_lock_release_recursive>:
 8003848:	4770      	bx	lr
	...

0800384c <_free_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4605      	mov	r5, r0
 8003850:	2900      	cmp	r1, #0
 8003852:	d041      	beq.n	80038d8 <_free_r+0x8c>
 8003854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003858:	1f0c      	subs	r4, r1, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	bfb8      	it	lt
 800385e:	18e4      	addlt	r4, r4, r3
 8003860:	f000 f8e0 	bl	8003a24 <__malloc_lock>
 8003864:	4a1d      	ldr	r2, [pc, #116]	@ (80038dc <_free_r+0x90>)
 8003866:	6813      	ldr	r3, [r2, #0]
 8003868:	b933      	cbnz	r3, 8003878 <_free_r+0x2c>
 800386a:	6063      	str	r3, [r4, #4]
 800386c:	6014      	str	r4, [r2, #0]
 800386e:	4628      	mov	r0, r5
 8003870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003874:	f000 b8dc 	b.w	8003a30 <__malloc_unlock>
 8003878:	42a3      	cmp	r3, r4
 800387a:	d908      	bls.n	800388e <_free_r+0x42>
 800387c:	6820      	ldr	r0, [r4, #0]
 800387e:	1821      	adds	r1, r4, r0
 8003880:	428b      	cmp	r3, r1
 8003882:	bf01      	itttt	eq
 8003884:	6819      	ldreq	r1, [r3, #0]
 8003886:	685b      	ldreq	r3, [r3, #4]
 8003888:	1809      	addeq	r1, r1, r0
 800388a:	6021      	streq	r1, [r4, #0]
 800388c:	e7ed      	b.n	800386a <_free_r+0x1e>
 800388e:	461a      	mov	r2, r3
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	b10b      	cbz	r3, 8003898 <_free_r+0x4c>
 8003894:	42a3      	cmp	r3, r4
 8003896:	d9fa      	bls.n	800388e <_free_r+0x42>
 8003898:	6811      	ldr	r1, [r2, #0]
 800389a:	1850      	adds	r0, r2, r1
 800389c:	42a0      	cmp	r0, r4
 800389e:	d10b      	bne.n	80038b8 <_free_r+0x6c>
 80038a0:	6820      	ldr	r0, [r4, #0]
 80038a2:	4401      	add	r1, r0
 80038a4:	1850      	adds	r0, r2, r1
 80038a6:	4283      	cmp	r3, r0
 80038a8:	6011      	str	r1, [r2, #0]
 80038aa:	d1e0      	bne.n	800386e <_free_r+0x22>
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	6053      	str	r3, [r2, #4]
 80038b2:	4408      	add	r0, r1
 80038b4:	6010      	str	r0, [r2, #0]
 80038b6:	e7da      	b.n	800386e <_free_r+0x22>
 80038b8:	d902      	bls.n	80038c0 <_free_r+0x74>
 80038ba:	230c      	movs	r3, #12
 80038bc:	602b      	str	r3, [r5, #0]
 80038be:	e7d6      	b.n	800386e <_free_r+0x22>
 80038c0:	6820      	ldr	r0, [r4, #0]
 80038c2:	1821      	adds	r1, r4, r0
 80038c4:	428b      	cmp	r3, r1
 80038c6:	bf04      	itt	eq
 80038c8:	6819      	ldreq	r1, [r3, #0]
 80038ca:	685b      	ldreq	r3, [r3, #4]
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	bf04      	itt	eq
 80038d0:	1809      	addeq	r1, r1, r0
 80038d2:	6021      	streq	r1, [r4, #0]
 80038d4:	6054      	str	r4, [r2, #4]
 80038d6:	e7ca      	b.n	800386e <_free_r+0x22>
 80038d8:	bd38      	pop	{r3, r4, r5, pc}
 80038da:	bf00      	nop
 80038dc:	20012f48 	.word	0x20012f48

080038e0 <sbrk_aligned>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	4e0f      	ldr	r6, [pc, #60]	@ (8003920 <sbrk_aligned+0x40>)
 80038e4:	460c      	mov	r4, r1
 80038e6:	6831      	ldr	r1, [r6, #0]
 80038e8:	4605      	mov	r5, r0
 80038ea:	b911      	cbnz	r1, 80038f2 <sbrk_aligned+0x12>
 80038ec:	f000 f9d6 	bl	8003c9c <_sbrk_r>
 80038f0:	6030      	str	r0, [r6, #0]
 80038f2:	4621      	mov	r1, r4
 80038f4:	4628      	mov	r0, r5
 80038f6:	f000 f9d1 	bl	8003c9c <_sbrk_r>
 80038fa:	1c43      	adds	r3, r0, #1
 80038fc:	d103      	bne.n	8003906 <sbrk_aligned+0x26>
 80038fe:	f04f 34ff 	mov.w	r4, #4294967295
 8003902:	4620      	mov	r0, r4
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	1cc4      	adds	r4, r0, #3
 8003908:	f024 0403 	bic.w	r4, r4, #3
 800390c:	42a0      	cmp	r0, r4
 800390e:	d0f8      	beq.n	8003902 <sbrk_aligned+0x22>
 8003910:	1a21      	subs	r1, r4, r0
 8003912:	4628      	mov	r0, r5
 8003914:	f000 f9c2 	bl	8003c9c <_sbrk_r>
 8003918:	3001      	adds	r0, #1
 800391a:	d1f2      	bne.n	8003902 <sbrk_aligned+0x22>
 800391c:	e7ef      	b.n	80038fe <sbrk_aligned+0x1e>
 800391e:	bf00      	nop
 8003920:	20012f44 	.word	0x20012f44

08003924 <_malloc_r>:
 8003924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003928:	1ccd      	adds	r5, r1, #3
 800392a:	f025 0503 	bic.w	r5, r5, #3
 800392e:	3508      	adds	r5, #8
 8003930:	2d0c      	cmp	r5, #12
 8003932:	bf38      	it	cc
 8003934:	250c      	movcc	r5, #12
 8003936:	2d00      	cmp	r5, #0
 8003938:	4606      	mov	r6, r0
 800393a:	db01      	blt.n	8003940 <_malloc_r+0x1c>
 800393c:	42a9      	cmp	r1, r5
 800393e:	d904      	bls.n	800394a <_malloc_r+0x26>
 8003940:	230c      	movs	r3, #12
 8003942:	6033      	str	r3, [r6, #0]
 8003944:	2000      	movs	r0, #0
 8003946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800394a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a20 <_malloc_r+0xfc>
 800394e:	f000 f869 	bl	8003a24 <__malloc_lock>
 8003952:	f8d8 3000 	ldr.w	r3, [r8]
 8003956:	461c      	mov	r4, r3
 8003958:	bb44      	cbnz	r4, 80039ac <_malloc_r+0x88>
 800395a:	4629      	mov	r1, r5
 800395c:	4630      	mov	r0, r6
 800395e:	f7ff ffbf 	bl	80038e0 <sbrk_aligned>
 8003962:	1c43      	adds	r3, r0, #1
 8003964:	4604      	mov	r4, r0
 8003966:	d158      	bne.n	8003a1a <_malloc_r+0xf6>
 8003968:	f8d8 4000 	ldr.w	r4, [r8]
 800396c:	4627      	mov	r7, r4
 800396e:	2f00      	cmp	r7, #0
 8003970:	d143      	bne.n	80039fa <_malloc_r+0xd6>
 8003972:	2c00      	cmp	r4, #0
 8003974:	d04b      	beq.n	8003a0e <_malloc_r+0xea>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	4639      	mov	r1, r7
 800397a:	4630      	mov	r0, r6
 800397c:	eb04 0903 	add.w	r9, r4, r3
 8003980:	f000 f98c 	bl	8003c9c <_sbrk_r>
 8003984:	4581      	cmp	r9, r0
 8003986:	d142      	bne.n	8003a0e <_malloc_r+0xea>
 8003988:	6821      	ldr	r1, [r4, #0]
 800398a:	1a6d      	subs	r5, r5, r1
 800398c:	4629      	mov	r1, r5
 800398e:	4630      	mov	r0, r6
 8003990:	f7ff ffa6 	bl	80038e0 <sbrk_aligned>
 8003994:	3001      	adds	r0, #1
 8003996:	d03a      	beq.n	8003a0e <_malloc_r+0xea>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	442b      	add	r3, r5
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	f8d8 3000 	ldr.w	r3, [r8]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	bb62      	cbnz	r2, 8003a00 <_malloc_r+0xdc>
 80039a6:	f8c8 7000 	str.w	r7, [r8]
 80039aa:	e00f      	b.n	80039cc <_malloc_r+0xa8>
 80039ac:	6822      	ldr	r2, [r4, #0]
 80039ae:	1b52      	subs	r2, r2, r5
 80039b0:	d420      	bmi.n	80039f4 <_malloc_r+0xd0>
 80039b2:	2a0b      	cmp	r2, #11
 80039b4:	d917      	bls.n	80039e6 <_malloc_r+0xc2>
 80039b6:	1961      	adds	r1, r4, r5
 80039b8:	42a3      	cmp	r3, r4
 80039ba:	6025      	str	r5, [r4, #0]
 80039bc:	bf18      	it	ne
 80039be:	6059      	strne	r1, [r3, #4]
 80039c0:	6863      	ldr	r3, [r4, #4]
 80039c2:	bf08      	it	eq
 80039c4:	f8c8 1000 	streq.w	r1, [r8]
 80039c8:	5162      	str	r2, [r4, r5]
 80039ca:	604b      	str	r3, [r1, #4]
 80039cc:	4630      	mov	r0, r6
 80039ce:	f000 f82f 	bl	8003a30 <__malloc_unlock>
 80039d2:	f104 000b 	add.w	r0, r4, #11
 80039d6:	1d23      	adds	r3, r4, #4
 80039d8:	f020 0007 	bic.w	r0, r0, #7
 80039dc:	1ac2      	subs	r2, r0, r3
 80039de:	bf1c      	itt	ne
 80039e0:	1a1b      	subne	r3, r3, r0
 80039e2:	50a3      	strne	r3, [r4, r2]
 80039e4:	e7af      	b.n	8003946 <_malloc_r+0x22>
 80039e6:	6862      	ldr	r2, [r4, #4]
 80039e8:	42a3      	cmp	r3, r4
 80039ea:	bf0c      	ite	eq
 80039ec:	f8c8 2000 	streq.w	r2, [r8]
 80039f0:	605a      	strne	r2, [r3, #4]
 80039f2:	e7eb      	b.n	80039cc <_malloc_r+0xa8>
 80039f4:	4623      	mov	r3, r4
 80039f6:	6864      	ldr	r4, [r4, #4]
 80039f8:	e7ae      	b.n	8003958 <_malloc_r+0x34>
 80039fa:	463c      	mov	r4, r7
 80039fc:	687f      	ldr	r7, [r7, #4]
 80039fe:	e7b6      	b.n	800396e <_malloc_r+0x4a>
 8003a00:	461a      	mov	r2, r3
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	d1fb      	bne.n	8003a00 <_malloc_r+0xdc>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6053      	str	r3, [r2, #4]
 8003a0c:	e7de      	b.n	80039cc <_malloc_r+0xa8>
 8003a0e:	230c      	movs	r3, #12
 8003a10:	6033      	str	r3, [r6, #0]
 8003a12:	4630      	mov	r0, r6
 8003a14:	f000 f80c 	bl	8003a30 <__malloc_unlock>
 8003a18:	e794      	b.n	8003944 <_malloc_r+0x20>
 8003a1a:	6005      	str	r5, [r0, #0]
 8003a1c:	e7d6      	b.n	80039cc <_malloc_r+0xa8>
 8003a1e:	bf00      	nop
 8003a20:	20012f48 	.word	0x20012f48

08003a24 <__malloc_lock>:
 8003a24:	4801      	ldr	r0, [pc, #4]	@ (8003a2c <__malloc_lock+0x8>)
 8003a26:	f7ff bf0e 	b.w	8003846 <__retarget_lock_acquire_recursive>
 8003a2a:	bf00      	nop
 8003a2c:	20012f40 	.word	0x20012f40

08003a30 <__malloc_unlock>:
 8003a30:	4801      	ldr	r0, [pc, #4]	@ (8003a38 <__malloc_unlock+0x8>)
 8003a32:	f7ff bf09 	b.w	8003848 <__retarget_lock_release_recursive>
 8003a36:	bf00      	nop
 8003a38:	20012f40 	.word	0x20012f40

08003a3c <__sflush_r>:
 8003a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a44:	0716      	lsls	r6, r2, #28
 8003a46:	4605      	mov	r5, r0
 8003a48:	460c      	mov	r4, r1
 8003a4a:	d454      	bmi.n	8003af6 <__sflush_r+0xba>
 8003a4c:	684b      	ldr	r3, [r1, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	dc02      	bgt.n	8003a58 <__sflush_r+0x1c>
 8003a52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	dd48      	ble.n	8003aea <__sflush_r+0xae>
 8003a58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a5a:	2e00      	cmp	r6, #0
 8003a5c:	d045      	beq.n	8003aea <__sflush_r+0xae>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a64:	682f      	ldr	r7, [r5, #0]
 8003a66:	6a21      	ldr	r1, [r4, #32]
 8003a68:	602b      	str	r3, [r5, #0]
 8003a6a:	d030      	beq.n	8003ace <__sflush_r+0x92>
 8003a6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a6e:	89a3      	ldrh	r3, [r4, #12]
 8003a70:	0759      	lsls	r1, r3, #29
 8003a72:	d505      	bpl.n	8003a80 <__sflush_r+0x44>
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	1ad2      	subs	r2, r2, r3
 8003a78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a7a:	b10b      	cbz	r3, 8003a80 <__sflush_r+0x44>
 8003a7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a7e:	1ad2      	subs	r2, r2, r3
 8003a80:	2300      	movs	r3, #0
 8003a82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a84:	6a21      	ldr	r1, [r4, #32]
 8003a86:	4628      	mov	r0, r5
 8003a88:	47b0      	blx	r6
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	d106      	bne.n	8003a9e <__sflush_r+0x62>
 8003a90:	6829      	ldr	r1, [r5, #0]
 8003a92:	291d      	cmp	r1, #29
 8003a94:	d82b      	bhi.n	8003aee <__sflush_r+0xb2>
 8003a96:	4a2a      	ldr	r2, [pc, #168]	@ (8003b40 <__sflush_r+0x104>)
 8003a98:	40ca      	lsrs	r2, r1
 8003a9a:	07d6      	lsls	r6, r2, #31
 8003a9c:	d527      	bpl.n	8003aee <__sflush_r+0xb2>
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	6062      	str	r2, [r4, #4]
 8003aa2:	04d9      	lsls	r1, r3, #19
 8003aa4:	6922      	ldr	r2, [r4, #16]
 8003aa6:	6022      	str	r2, [r4, #0]
 8003aa8:	d504      	bpl.n	8003ab4 <__sflush_r+0x78>
 8003aaa:	1c42      	adds	r2, r0, #1
 8003aac:	d101      	bne.n	8003ab2 <__sflush_r+0x76>
 8003aae:	682b      	ldr	r3, [r5, #0]
 8003ab0:	b903      	cbnz	r3, 8003ab4 <__sflush_r+0x78>
 8003ab2:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ab6:	602f      	str	r7, [r5, #0]
 8003ab8:	b1b9      	cbz	r1, 8003aea <__sflush_r+0xae>
 8003aba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003abe:	4299      	cmp	r1, r3
 8003ac0:	d002      	beq.n	8003ac8 <__sflush_r+0x8c>
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f7ff fec2 	bl	800384c <_free_r>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6363      	str	r3, [r4, #52]	@ 0x34
 8003acc:	e00d      	b.n	8003aea <__sflush_r+0xae>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	47b0      	blx	r6
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	1c50      	adds	r0, r2, #1
 8003ad8:	d1c9      	bne.n	8003a6e <__sflush_r+0x32>
 8003ada:	682b      	ldr	r3, [r5, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0c6      	beq.n	8003a6e <__sflush_r+0x32>
 8003ae0:	2b1d      	cmp	r3, #29
 8003ae2:	d001      	beq.n	8003ae8 <__sflush_r+0xac>
 8003ae4:	2b16      	cmp	r3, #22
 8003ae6:	d11e      	bne.n	8003b26 <__sflush_r+0xea>
 8003ae8:	602f      	str	r7, [r5, #0]
 8003aea:	2000      	movs	r0, #0
 8003aec:	e022      	b.n	8003b34 <__sflush_r+0xf8>
 8003aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af2:	b21b      	sxth	r3, r3
 8003af4:	e01b      	b.n	8003b2e <__sflush_r+0xf2>
 8003af6:	690f      	ldr	r7, [r1, #16]
 8003af8:	2f00      	cmp	r7, #0
 8003afa:	d0f6      	beq.n	8003aea <__sflush_r+0xae>
 8003afc:	0793      	lsls	r3, r2, #30
 8003afe:	680e      	ldr	r6, [r1, #0]
 8003b00:	bf08      	it	eq
 8003b02:	694b      	ldreq	r3, [r1, #20]
 8003b04:	600f      	str	r7, [r1, #0]
 8003b06:	bf18      	it	ne
 8003b08:	2300      	movne	r3, #0
 8003b0a:	eba6 0807 	sub.w	r8, r6, r7
 8003b0e:	608b      	str	r3, [r1, #8]
 8003b10:	f1b8 0f00 	cmp.w	r8, #0
 8003b14:	dde9      	ble.n	8003aea <__sflush_r+0xae>
 8003b16:	6a21      	ldr	r1, [r4, #32]
 8003b18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003b1a:	4643      	mov	r3, r8
 8003b1c:	463a      	mov	r2, r7
 8003b1e:	4628      	mov	r0, r5
 8003b20:	47b0      	blx	r6
 8003b22:	2800      	cmp	r0, #0
 8003b24:	dc08      	bgt.n	8003b38 <__sflush_r+0xfc>
 8003b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b2e:	81a3      	strh	r3, [r4, #12]
 8003b30:	f04f 30ff 	mov.w	r0, #4294967295
 8003b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b38:	4407      	add	r7, r0
 8003b3a:	eba8 0800 	sub.w	r8, r8, r0
 8003b3e:	e7e7      	b.n	8003b10 <__sflush_r+0xd4>
 8003b40:	20400001 	.word	0x20400001

08003b44 <_fflush_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	690b      	ldr	r3, [r1, #16]
 8003b48:	4605      	mov	r5, r0
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	b913      	cbnz	r3, 8003b54 <_fflush_r+0x10>
 8003b4e:	2500      	movs	r5, #0
 8003b50:	4628      	mov	r0, r5
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	b118      	cbz	r0, 8003b5e <_fflush_r+0x1a>
 8003b56:	6a03      	ldr	r3, [r0, #32]
 8003b58:	b90b      	cbnz	r3, 8003b5e <_fflush_r+0x1a>
 8003b5a:	f7ff fc95 	bl	8003488 <__sinit>
 8003b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f3      	beq.n	8003b4e <_fflush_r+0xa>
 8003b66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b68:	07d0      	lsls	r0, r2, #31
 8003b6a:	d404      	bmi.n	8003b76 <_fflush_r+0x32>
 8003b6c:	0599      	lsls	r1, r3, #22
 8003b6e:	d402      	bmi.n	8003b76 <_fflush_r+0x32>
 8003b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b72:	f7ff fe68 	bl	8003846 <__retarget_lock_acquire_recursive>
 8003b76:	4628      	mov	r0, r5
 8003b78:	4621      	mov	r1, r4
 8003b7a:	f7ff ff5f 	bl	8003a3c <__sflush_r>
 8003b7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b80:	07da      	lsls	r2, r3, #31
 8003b82:	4605      	mov	r5, r0
 8003b84:	d4e4      	bmi.n	8003b50 <_fflush_r+0xc>
 8003b86:	89a3      	ldrh	r3, [r4, #12]
 8003b88:	059b      	lsls	r3, r3, #22
 8003b8a:	d4e1      	bmi.n	8003b50 <_fflush_r+0xc>
 8003b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b8e:	f7ff fe5b 	bl	8003848 <__retarget_lock_release_recursive>
 8003b92:	e7dd      	b.n	8003b50 <_fflush_r+0xc>

08003b94 <__swhatbuf_r>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	460c      	mov	r4, r1
 8003b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b9c:	2900      	cmp	r1, #0
 8003b9e:	b096      	sub	sp, #88	@ 0x58
 8003ba0:	4615      	mov	r5, r2
 8003ba2:	461e      	mov	r6, r3
 8003ba4:	da0d      	bge.n	8003bc2 <__swhatbuf_r+0x2e>
 8003ba6:	89a3      	ldrh	r3, [r4, #12]
 8003ba8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	bf14      	ite	ne
 8003bb2:	2340      	movne	r3, #64	@ 0x40
 8003bb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003bb8:	2000      	movs	r0, #0
 8003bba:	6031      	str	r1, [r6, #0]
 8003bbc:	602b      	str	r3, [r5, #0]
 8003bbe:	b016      	add	sp, #88	@ 0x58
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
 8003bc2:	466a      	mov	r2, sp
 8003bc4:	f000 f848 	bl	8003c58 <_fstat_r>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	dbec      	blt.n	8003ba6 <__swhatbuf_r+0x12>
 8003bcc:	9901      	ldr	r1, [sp, #4]
 8003bce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003bd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003bd6:	4259      	negs	r1, r3
 8003bd8:	4159      	adcs	r1, r3
 8003bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bde:	e7eb      	b.n	8003bb8 <__swhatbuf_r+0x24>

08003be0 <__smakebuf_r>:
 8003be0:	898b      	ldrh	r3, [r1, #12]
 8003be2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003be4:	079d      	lsls	r5, r3, #30
 8003be6:	4606      	mov	r6, r0
 8003be8:	460c      	mov	r4, r1
 8003bea:	d507      	bpl.n	8003bfc <__smakebuf_r+0x1c>
 8003bec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	6123      	str	r3, [r4, #16]
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	6163      	str	r3, [r4, #20]
 8003bf8:	b003      	add	sp, #12
 8003bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bfc:	ab01      	add	r3, sp, #4
 8003bfe:	466a      	mov	r2, sp
 8003c00:	f7ff ffc8 	bl	8003b94 <__swhatbuf_r>
 8003c04:	9f00      	ldr	r7, [sp, #0]
 8003c06:	4605      	mov	r5, r0
 8003c08:	4639      	mov	r1, r7
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f7ff fe8a 	bl	8003924 <_malloc_r>
 8003c10:	b948      	cbnz	r0, 8003c26 <__smakebuf_r+0x46>
 8003c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c16:	059a      	lsls	r2, r3, #22
 8003c18:	d4ee      	bmi.n	8003bf8 <__smakebuf_r+0x18>
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	f043 0302 	orr.w	r3, r3, #2
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	e7e2      	b.n	8003bec <__smakebuf_r+0xc>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	6020      	str	r0, [r4, #0]
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c2e:	81a3      	strh	r3, [r4, #12]
 8003c30:	9b01      	ldr	r3, [sp, #4]
 8003c32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c36:	b15b      	cbz	r3, 8003c50 <__smakebuf_r+0x70>
 8003c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	f000 f81d 	bl	8003c7c <_isatty_r>
 8003c42:	b128      	cbz	r0, 8003c50 <__smakebuf_r+0x70>
 8003c44:	89a3      	ldrh	r3, [r4, #12]
 8003c46:	f023 0303 	bic.w	r3, r3, #3
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	81a3      	strh	r3, [r4, #12]
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	431d      	orrs	r5, r3
 8003c54:	81a5      	strh	r5, [r4, #12]
 8003c56:	e7cf      	b.n	8003bf8 <__smakebuf_r+0x18>

08003c58 <_fstat_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4d07      	ldr	r5, [pc, #28]	@ (8003c78 <_fstat_r+0x20>)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4604      	mov	r4, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	f7fc ff02 	bl	8000a6e <_fstat>
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	d102      	bne.n	8003c74 <_fstat_r+0x1c>
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	b103      	cbz	r3, 8003c74 <_fstat_r+0x1c>
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	bd38      	pop	{r3, r4, r5, pc}
 8003c76:	bf00      	nop
 8003c78:	20012f3c 	.word	0x20012f3c

08003c7c <_isatty_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	4d06      	ldr	r5, [pc, #24]	@ (8003c98 <_isatty_r+0x1c>)
 8003c80:	2300      	movs	r3, #0
 8003c82:	4604      	mov	r4, r0
 8003c84:	4608      	mov	r0, r1
 8003c86:	602b      	str	r3, [r5, #0]
 8003c88:	f7fc ff01 	bl	8000a8e <_isatty>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_isatty_r+0x1a>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_isatty_r+0x1a>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	20012f3c 	.word	0x20012f3c

08003c9c <_sbrk_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4d06      	ldr	r5, [pc, #24]	@ (8003cb8 <_sbrk_r+0x1c>)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	602b      	str	r3, [r5, #0]
 8003ca8:	f000 f808 	bl	8003cbc <_sbrk>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d102      	bne.n	8003cb6 <_sbrk_r+0x1a>
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	b103      	cbz	r3, 8003cb6 <_sbrk_r+0x1a>
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	20012f3c 	.word	0x20012f3c

08003cbc <_sbrk>:
 8003cbc:	4a04      	ldr	r2, [pc, #16]	@ (8003cd0 <_sbrk+0x14>)
 8003cbe:	6811      	ldr	r1, [r2, #0]
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	b909      	cbnz	r1, 8003cc8 <_sbrk+0xc>
 8003cc4:	4903      	ldr	r1, [pc, #12]	@ (8003cd4 <_sbrk+0x18>)
 8003cc6:	6011      	str	r1, [r2, #0]
 8003cc8:	6810      	ldr	r0, [r2, #0]
 8003cca:	4403      	add	r3, r0
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	4770      	bx	lr
 8003cd0:	20012f4c 	.word	0x20012f4c
 8003cd4:	20012f50 	.word	0x20012f50

08003cd8 <_init>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	bf00      	nop
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr

08003ce4 <_fini>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr
